System.register(["angular2/core", "../../event"], function (exports_1, context_1) {
    "use strict";
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __moduleName = context_1 && context_1.id;
    var core_1, event_1, LoadingIndicator;
    return {
        setters: [
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (event_1_1) {
                event_1 = event_1_1;
            }
        ],
        execute: function () {
            LoadingIndicator = (function () {
                function LoadingIndicator() {
                    this.model = event_1.LoadingIndicatorEvent.Show;
                    this.showRequest = false;
                    var self = this;
                    var eventManager = window.ioc.resolve("IEventManager");
                    eventManager.subscribe(event_1.LoadingIndicatorEvent.Show, function () { return self.onShow(); });
                    eventManager.subscribe(event_1.LoadingIndicatorEvent.Hide, function () { return self.onHide(); });
                }
                LoadingIndicator.prototype.onShow = function () {
                    this.showRequest = true;
                    var self = this;
                    window.setTimeout(function () {
                        if (self.showRequest !== true) {
                            return;
                        }
                        self.model = event_1.LoadingIndicatorEvent.Show;
                    }, 300);
                };
                LoadingIndicator.prototype.onHide = function () {
                    this.showRequest = false;
                    this.model = event_1.LoadingIndicatorEvent.Hide;
                };
                return LoadingIndicator;
            }());
            LoadingIndicator = __decorate([
                core_1.Component({
                    selector: "loading-indicator",
                    template: "<div id='loaderIndicator' class='loading {{model}}'>&nbsp;</div>"
                }),
                __metadata("design:paramtypes", [])
            ], LoadingIndicator);
            exports_1("LoadingIndicator", LoadingIndicator);
        }
    };
});
//# sourceMappingURL=loadingIndicator.js.map