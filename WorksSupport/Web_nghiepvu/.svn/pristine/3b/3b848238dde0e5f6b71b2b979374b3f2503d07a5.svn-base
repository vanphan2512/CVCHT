System.register(["angular2/core", "../models/exception", "../event"], function (exports_1, context_1) {
    "use strict";
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __moduleName = context_1 && context_1.id;
    var core_1, exception_1, event_1, ValidationDirective;
    return {
        setters: [
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (exception_1_1) {
                exception_1 = exception_1_1;
            },
            function (event_1_1) {
                event_1 = event_1_1;
            }
        ],
        execute: function () {
            ValidationDirective = (function () {
                function ValidationDirective(html) {
                    var self = this;
                    this.el = html.nativeElement;
                    var eventManager = window.ioc.resolve("IEventManager");
                    eventManager.subscribe(event_1.ValidationEvent.ValidationFail, function (error) { return self.onValidationFailed(error); });
                }
                Object.defineProperty(ValidationDirective.prototype, "keys", {
                    set: function (keys) {
                        this.errorKeys = keys;
                    },
                    enumerable: true,
                    configurable: true
                });
                ValidationDirective.prototype.onValidationFailed = function (exception) {
                    var errors = exception.errors;
                    if (!errors || errors.length === 0) {
                        this.hideError();
                        return;
                    }
                    var self = this;
                    var error = errors.firstOrDefault(function (item) {
                        return self.errorKeys.indexOf(item.key) >= 0;
                    });
                    if (!!error && !!error.key) {
                        self.showError(error);
                        return;
                    }
                    self.hideError();
                };
                ValidationDirective.prototype.showError = function (error) {
                    var resourceHelper = window.ioc.resolve("IResource");
                    var errorMessage = resourceHelper.resolve(error.key);
                    window.jQuery(this.el).addClass(exception_1.ValidationMode.Invalid);
                    this.el.setAttribute("origin-title", this.el.title);
                    this.el.title = errorMessage;
                };
                ValidationDirective.prototype.hideError = function () {
                    window.jQuery(this.el).removeClass(exception_1.ValidationMode.Invalid);
                    var holderText = this.el.getAttribute("origin-title");
                    if (!!holderText) {
                        this.el.title = holderText;
                    }
                };
                return ValidationDirective;
            }());
            __decorate([
                core_1.Input("validation"),
                __metadata("design:type", Array),
                __metadata("design:paramtypes", [Array])
            ], ValidationDirective.prototype, "keys", null);
            ValidationDirective = __decorate([
                core_1.Directive({
                    selector: "[validation]"
                }),
                __metadata("design:paramtypes", [core_1.ElementRef])
            ], ValidationDirective);
            exports_1("ValidationDirective", ValidationDirective);
        }
    };
});
//# sourceMappingURL=validation.js.map