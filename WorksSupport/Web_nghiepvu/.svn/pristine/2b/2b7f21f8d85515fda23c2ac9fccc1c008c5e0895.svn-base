System.register(["../../../../common/helpers/configHelper"], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    function getStatus() {
        var connector = window.ioc.resolve("IConnector");
        var url = String.format("{0}{1}", configHelper_1.default.getAppConfig().api.baseUrl, "v2/status");
        return connector.get(url);
    }
    // Search data by keyWord and isDeleleted
    function getStatusBy(keyWord, isDelete, pageIndex, pageSize) {
        var connector = window.ioc.resolve("IConnector");
        // cunstructer param to search.
        var keySearch = "?Keywords=" + keyWord;
        var isDel = "&IsDeleted=" + isDelete;
        var index = "&PageIndex=" + pageIndex;
        var size = "&PageSize=" + pageSize;
        var url = String.format("{0}{1}{2}{3}{4}{5}", configHelper_1.default.getAppConfig().api.baseUrl, "v2/status/Search", keySearch, isDel, index, size);
        return connector.get(url);
    }
    // Get data by id
    function get(id) {
        var connector = window.ioc.resolve("IConnector");
        var url = String.format("{0}v2/status/{1}", configHelper_1.default.getAppConfig().api.baseUrl, id);
        return connector.get(url);
    }
    // Create new
    function create(model) {
        var connector = window.ioc.resolve("IConnector");
        var url = String.format("{0}{1}", configHelper_1.default.getAppConfig().api.baseUrl, "v2/status/insertBy");
        return connector.post(url, model);
    }
    // Update data
    function update(model) {
        var connector = window.ioc.resolve("IConnector");
        var url = String.format("{0}{1}", configHelper_1.default.getAppConfig().api.baseUrl, "v2/status/insertBy");
        return connector.post(url, model);
    }
    function remove(deleteModel) {
        var connector = window.ioc.resolve("IConnector");
        var url = String.format("{0}/{1}", configHelper_1.default.getAppConfig().api.baseUrl, "v2/status/Del");
        return connector.post(url, deleteModel);
    }
    var configHelper_1, statusService;
    return {
        setters: [
            function (configHelper_1_1) {
                configHelper_1 = configHelper_1_1;
            }
        ],
        execute: function () {
            statusService = {
                getStatus: getStatus,
                getStatusBy: getStatusBy,
                create: create,
                update: update,
                delete: remove,
                get: get
            };
            exports_1("default", statusService);
        }
    };
});
//# sourceMappingURL=statusService.js.map