import { Component, ViewChild, OnInit, Input } from "angular2/core";
import { Router } from "angular2/router";
import { Http } from "angular2/http";
import { BasePage } from "../../../common/models/ui";
import { FormDatePicker, FormFilesUpload } from "../../../common/directive";
import worksGroupService from "../_share/services/WorksGroupService";
import route from "../_share/config/route";
import { CACHE_CONSTANT } from "../../../common/services/cacheService";
import { ErrorMessage } from "../../../common/directives/common/errorMessage";
import { ValidationException } from "../../../common/models/exception";
import { RoleValue } from "../../../common/enum";
import projectService from "../_share/services/projectService";
import WorksSerice from "../_share/services/worksSerice";
import WorkDetailSerice from "../_share/services/workDetailService";
import { ProcessUserModel } from "../works/AddProcessUser";
import prioritiesService from "../../configurations/_share/services/priorityService";
import { EditModel } from "../works/editModel";
import configHelper from "../../../common/helpers/configHelper";
import reportsService from "../_share/services/report";
import sessionStorage from "../../../common/storages/sessionStorage";
@Component({
    templateUrl: "app/modules/eoffice/report/report.html",
    directives: [FormDatePicker, FormFilesUpload]
})
export class Report extends BasePage implements OnInit {
    private router: Router;
    public user = sessionStorage.get(CACHE_CONSTANT.strUserName);
    public listProject: Array<any> = [];
    public selectedProject: string = "";
    public listWorkGroups: Array<any>;
    public selectedWorkGroups: string = "";
    public txtFromDates: string = "";
    public txtToDates: string = "";
    public listReport: any = null;
    public totalReport: number = 0;
    public totalStatus: number = 0;
    public listReportByStatus: Array<any> = [];
    public listReportByState: any = null;
    public listReportByGroup: Array<any> = [];
    constructor(router: Router) {
        super();
    }
    ngOnInit() {
        let $ = window.jQuery;
        let self: Report = this;
        $('#mySelect').on('change', function (e: any) {
            $('#myTab li a').eq($(this).val()).tab('show');
        });

        self.loadProject();
        /* $.fn.extend({
            treeview: function () {
                return this.each(function () {
                    var tree = $(this);
                    tree.addClass('treeview-tree');
                    tree.find('li').each(function () {
                        var stick = $(this);
                    });
                    tree.find('li').has("ul").each(function () {
                        var branch = $(this);
                        branch.prepend("<i class='tree-indicator fa fa-caret-right'></i>");
                        branch.addClass('tree-branch');
                        branch.on('click', function (e: any) {
                            if (this == e.target) {
                                var icon = $(this).children('i:first');
                                icon.toggleClass("tree-indicator fa fa-caret-down fa fa-caret-right");
                                $(this).children().children().toggle();
                            }
                        })
                        branch.children().children().toggle();
                        branch.children('.tree-indicator, button, a').click(function (e: any) {
                            branch.click();
                            e.preventDefault();
                        });
                    });
                });
            }
        });

        $('.treeview').each(function () {
            var tree = $(this);
            tree.treeview();
        }); */
        /* Highcharts.chart('container', {
            title: {
                text: 'Trạng thái công việc cần hổ trợ.',
                verticalAlign: "bottom",
                useHTML: true,
                style: {
                    color: "#4c5c68",
                    fontSize: "14px",
                },
            },
            credits: {
                enabled: false,
            },
            tooltip: {
                formatter: function () {
                    return '<b>' + this.point.name.toLowerCase() +
                        ':</b>' + this.y;
                }
            },

            chart: {
                type: 'pie',
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false,
                marginBottom: 60

            },
            series: [{
                // name: '',
                // useHTML: true,
                // keys: ['name', 'y', 'selected', 'sliced'],
                data: [
                    ['Đã tiếp nhận', 200],
                    ['khởi tạo', 50]
                ],


                showInLegend: true
            }],
            plotOptions: {
                useHTML: true,
                series: {
                    useHTML: true,
                    enabled: false,
                    // click item
                    allowPointSelect: false,

                    dataLabels: {
                        useHTML: true,
                        format: '{point.percentage:.1f} %',
                        color: '#fff',
                        enabled: true,
                        distance: -50,
                        connectorWidth: 1,
                        borderRadius: 5,
                        // backgroundColor: 'rgba(252, 255, 197, 0.7)',
                        borderWidth: 0,
                        borderColor: '#AAA',
                        y: -6,
                        x: 0,
                        style: {
                            color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                        }
                    },

                }
            },

            navigation: {
                buttonOptions: {
                    enabled: false,
                    align: 'right'
                }
            },
            legend: {
                useHTML: true,
                enabled: true,
                align: 'left',
                verticalAlign: 'top',
                layout: 'vertical',
                x: 0,
                y: 100,
                lineHeight: '18px',
                itemStyle: {
                    color: "#23527c",
                    fontSize: '13px',
                    fontWeight: '500',

                },
                itemHoverStyle: {
                    useHTML: true,
                    color: '#FF0000'
                }
            },

        });
        Highcharts.chart('containerColumn', {
                                        chart: {
                                            type: 'column',
                                            marginTop: 50,
                                            marginBottom: 60
                                        },
                                        legend: {
                                            useHTML: true,
                                            enabled: true,
                                            align: 'left',
                                            verticalAlign: 'top',
                                            lineHeight: '18px',
                                            x: 20,
                                            y: -10,
                                            itemStyle: {
                                                lineHeight: '14px',
                                                color: "#23527c",
                                                fontSize: '13px',
                                                fontWeight: '500',

                                            },
                                            itemHoverStyle: {
                                                color: '#FF0000'
                                            }
                                        },
                                        tooltip: {
                                            headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                                            pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                                                '<td style="padding:0"><b>{point.y:.1f} mm</b></td></tr>',
                                            footerFormat: '</table>',
                                            shared: true,
                                            useHTML: true
                                        },
                                        plotOptions: {
                                            column: {
                                                pointPadding: 0.2,
                                                borderWidth: 0,
                                                dataLabels: {
                                                    enabled: true,
                                                    color: '#FFFFFF',
                                                    align: 'center',
                                                    format: '{y}', // one decimal
                                                    y: 30, // 10 pixels down from the top
                                                    style: {
                                                        fontSize: '10px',
                                                        // fontFamily: 'Verdana, sans-serif'
                                                    }
                                                }
                                            }
                                        },
                                        credits: {
                                            enabled: false,
                                        },
                                        navigation: {
                                                buttonOptions: {
                                                    enabled: false,
                                                    align: 'right'
                                                }
                                            },
                                        title: {
                                            text: 'Tình trạng công việc cần hổ trợ.',
                                            verticalAlign: "bottom",
                                            useHTML: true,
                                            style: {
                                                color: "#4c5c68",
                                                fontSize: "14px", 
                                            },
                                        },
                                        xAxis: {
                                            categories: ["01/2016", "02/2016", "03/2016999", "04/2016", "05/2016", "06/2016", "07/2016999", "08/2016", "09/2016"],
                                            crosshair: true
                                        },
                                        yAxis: {
                                            min: 0,
                                            allowDecimals: false,
                                            title: {
                                                text: 'Công việc'
                                            }
                                        },
                                        series: [{
                                            name: 'Hoàn thành',
                                            data: [49, 71, 16, 29, 44, 76, 35, 48, 64]

                                        }, {
                                            name: 'Vị phạm',
                                            data: [36, 78, 85, 34, 60, 85, 50, 10, 12]

                                        }, {
                                            name: 'Trể hạn',
                                            data: [48, 38, 39, 41, 47, 48, 59, 59, 52]

                                        }]
                                    }); */
    }
    private loadProject() {
        let self: Report = this;
        let $ = window.jQuery;
        let roleValue: string = RoleValue.Admin;
        let isAdmin: boolean = sessionStorage.get(CACHE_CONSTANT.strUserName) === roleValue ? true : false;
        let user = isAdmin === false ? sessionStorage.get(CACHE_CONSTANT.strUserName) : "administrator";
        reportsService.getProject(user).then(function (items: Array<any>) {
            self.listProject = items;
        });
    }
    private getWorkGroup() {
        let self: Report = this;
        let $ = window.jQuery;
        self.listWorkGroups = [];
        reportsService.getWorkGroupByProjectId(self.selectedProject).then(function (items: Array<any>) {
            self.listWorkGroups = items;
        });
    }
    private search() {
        let self: Report = this;
        let $ = window.jQuery;
        reportsService.getReport(self.selectedProject, self.selectedWorkGroups, self.stringToDate(self.txtFromDates, "dd/MM/yyyy", "/"), self.stringToDate(self.txtToDates, "dd/MM/yyyy", "/")).then(function (items: Array<any>) {
            self.listReport = items;
            self.totalReport = 0;
            self.totalStatus = 0;
            if (self.listReport !== null && self.listReport != []) {
                self.listReport.WorkStatusList.forEach(element => {
                    self.totalReport += element.NumberOfWork;
                });
                self.totalStatus += self.listReport.WorkWrong.NumberOfWorkLate;
                self.totalStatus += self.listReport.WorkWrong.NumberOfWorkWrong;
            }
        });
        reportsService.getWorkStateByStateType(self.selectedProject, self.selectedWorkGroups, self.stringToDate(self.txtFromDates, "dd/MM/yyyy", "/"), self.stringToDate(self.txtToDates, "dd/MM/yyyy", "/")).then(function (items: Array<any>) {
            self.listReportByState = items;
            self.listReportByState.listWorkGroupByStateLate = [];
            self.listReportByState.listWorkGroupByStateWrong = [];
        });
        reportsService.getReportByStatus(self.selectedProject, self.selectedWorkGroups, self.stringToDate(self.txtFromDates, "dd/MM/yyyy", "/"), self.stringToDate(self.txtToDates, "dd/MM/yyyy", "/")).then(function (items: Array<any>) {
            self.listReportByStatus = items;
            self.listReportByStatus.forEach(element => {
                element.listWorkGroupByStatus = [];
            });
        });
        reportsService.getWorkGroupByGroupType(self.selectedProject, self.selectedWorkGroups, self.stringToDate(self.txtFromDates, "dd/MM/yyyy", "/"), self.stringToDate(self.txtToDates, "dd/MM/yyyy", "/")).then(function (items: Array<any>) {
            self.listReportByGroup = items;
            self.listReportByGroup.forEach(element => {
                element.listWorkGroupDetailByGroup = [];
            });
        });
    }
    private LoadWorkGroupsByState(ID: any, event: any) {
        let self: Report = this;
        let $ = window.jQuery;
        reportsService.loadWorkGroupsByState(self.selectedProject, self.selectedWorkGroups, self.stringToDate(self.txtFromDates, "dd/MM/yyyy", "/"), self.stringToDate(self.txtToDates, "dd/MM/yyyy", "/"), ID).then(function (items: Array<any>) {
            if (ID === 1) {
                self.listReportByState.listWorkGroupByStateLate = items;
                self.listReportByState.listWorkGroupByStateLate.forEach(element => {
                    element.listWorkDetailByStateType = [];
                });
            }
            if (ID === 2) {
                self.listReportByState.listWorkGroupByStateWrong = items;
                self.listReportByState.listWorkGroupByStateWrong.forEach(element => {
                    element.listWorkDetailByStateType = [];
                });
            }
            if (items.length > 0) {
                if ($(event.target).hasClass("tree-collapsed")) {
                    $(event.target).removeClass("tree-collapsed");
                    $(event.target).addClass("tree-collapse")
                }
                else {
                    $(event.target).removeClass("tree-collapse");
                    $(event.target).addClass("tree-collapsed");
                }
                $('#type' + ID).collapse("toggle");
            }
        });
    }
    private getWorkDetailByStateType(typeID: any, ID: any, event: any) {
        let self: Report = this;
        let $ = window.jQuery;
        reportsService.getWorkDetailByStateType(self.selectedProject, self.selectedWorkGroups, self.stringToDate(self.txtFromDates, "dd/MM/yyyy", "/"), self.stringToDate(self.txtToDates, "dd/MM/yyyy", "/"), typeID).then(function (items: Array<any>) {
            if (typeID === 1) {
                let index = self.listReportByState.listWorkGroupByStateLate.findIndex(_ => _.WorksSupportGroupId.toString() === ID.toString());
                if(index>-1)
                    {
                        self.listReportByState.listWorkGroupByStateLate[index].listWorkDetailByStateType = items;
                    }
            }
            if (typeID === 2) {
                let index = self.listReportByState.listWorkGroupByStateWrong.findIndex(_ => _.WorksSupportGroupId.toString() === ID.toString());
                if(index>-1)
                    {
                        self.listReportByState.listWorkGroupByStateWrong[index].listWorkDetailByStateType = items;
                    }
            }
            if (items.length > 0) {
                    if ($(event.target).hasClass("tree-collapsed")) {
                        $(event.target).removeClass("tree-collapsed");
                        $(event.target).addClass("tree-collapse")
                    }
                    else {
                        $(event.target).removeClass("tree-collapse");
                        $(event.target).addClass("tree-collapsed");
                    }
                    $('#wg' + typeID + ID).collapse("toggle");
                }
        });
        event.stopPropagation();
        //$('#wg'+statusID+ID).collapse("show");
    }
    private getWorkDetailByGroupType(ID: any, event: any) {
        let self: Report = this;
        let $ = window.jQuery;
        reportsService.getWorkDetailByGroupType(self.selectedProject, self.selectedWorkGroups, self.stringToDate(self.txtFromDates, "dd/MM/yyyy", "/"), self.stringToDate(self.txtToDates, "dd/MM/yyyy", "/")).then(function (items: Array<any>) {
            let index = self.listReportByGroup.findIndex(_ => _.WorksSupportGroupId.toString() === ID.toString());
            if (index > -1) {
                self.listReportByGroup[index].listWorkGroupDetailByGroup = items;
            }
            if (items.length > 0) {
                if ($(event.target).hasClass("tree-collapsed")) {
                    $(event.target).removeClass("tree-collapsed");
                    $(event.target).addClass("tree-collapse")
                }
                else {
                    $(event.target).removeClass("tree-collapse");
                    $(event.target).addClass("tree-collapsed");
                }
                $('#wgdt' + ID).collapse("toggle");
            }
        });
    }
    private getWorkGroupByStatus(statusID: any, event: any) {
        let self: Report = this;
        let $ = window.jQuery;
        reportsService.getWorkGroupByStatus(self.selectedProject, self.selectedWorkGroups, self.stringToDate(self.txtFromDates, "dd/MM/yyyy", "/"), self.stringToDate(self.txtToDates, "dd/MM/yyyy", "/"), statusID).then(function (items: Array<any>) {
            let index = self.listReportByStatus.findIndex(_ => _.StatusId.toString() === statusID.toString());
            if (index > -1) {
                self.listReportByStatus[index].listWorkGroupByStatus = items;
                self.listReportByStatus[index].listWorkGroupByStatus.forEach(element => {
                    element.listWorkStatusByWorkGroupId = [];
                });
            }
            if (items.length > 0) {
                if ($(event.target).hasClass("tree-collapsed")) {
                    $(event.target).removeClass("tree-collapsed");
                    $(event.target).addClass("tree-collapse")
                }
                else {
                    $(event.target).removeClass("tree-collapse");
                    $(event.target).addClass("tree-collapsed");
                }
                $('#' + statusID).collapse("toggle");
            }
        });
    }
    private getWorkStatusByWorkGroupId(statusID: any, ID: any, event: any) {
        let self: Report = this;
        let $ = window.jQuery;
        reportsService.getWorkStatusByWorkGroupId(self.selectedProject, self.selectedWorkGroups, self.stringToDate(self.txtFromDates, "dd/MM/yyyy", "/"), self.stringToDate(self.txtToDates, "dd/MM/yyyy", "/"), statusID).then(function (items: Array<any>) {
            let index = self.listReportByStatus.findIndex(_ => _.StatusId.toString() === statusID.toString());
            if (index > -1) {
                let idx = self.listReportByStatus[index].listWorkGroupByStatus.findIndex(obj => obj.WorksSupportGroupId.toString() === ID.toString())
                if (idx > -1) self.listReportByStatus[index].listWorkGroupByStatus[idx].listWorkStatusByWorkGroupId = items;
                if (items.length > 0) {
                    if ($(event.target).hasClass("tree-collapsed")) {
                        $(event.target).removeClass("tree-collapsed");
                        $(event.target).addClass("tree-collapse")
                    }
                    else {
                        $(event.target).removeClass("tree-collapse");
                        $(event.target).addClass("tree-collapsed");
                    }
                    $('#wg' + statusID + ID).collapse("toggle");
                }
            }
        });
        event.stopPropagation();
        //$('#wg'+statusID+ID).collapse("show");
    }
    public stringToDate(_date: any, _format: any, _delimiter: any): Date {
        var formatLowerCase = _format.toLowerCase();
        var formatItems = formatLowerCase.split(_delimiter);
        var dateItems = _date.split(_delimiter);
        var monthIndex = formatItems.indexOf("mm");
        var dayIndex = formatItems.indexOf("dd");
        var yearIndex = formatItems.indexOf("yyyy");
        var month = parseInt(dateItems[monthIndex]);
        month -= 1;
        var formatedDate = new Date(dateItems[yearIndex], month, dateItems[dayIndex], 12, 0, 0);
        return formatedDate;
    }
    public stringAsDate(inputFormat: string) {
        function pad(s: any) { return (s < 10) ? '0' + s : s; }
        var d = new Date(inputFormat);
        return [pad(d.getDate()), pad(d.getMonth() + 1), d.getFullYear()].join('/');
    }
}