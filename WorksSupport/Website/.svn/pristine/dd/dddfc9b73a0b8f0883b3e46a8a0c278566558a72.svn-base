System.register(["angular2/core", "../../../common/models/ui", "./selectModel", "../../../common/enum"], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __extends = (this && this.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1, ui_1, selectModel_1, enum_1;
    var FormSelect;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (ui_1_1) {
                ui_1 = ui_1_1;
            },
            function (selectModel_1_1) {
                selectModel_1 = selectModel_1_1;
            },
            function (enum_1_1) {
                enum_1 = enum_1_1;
            }],
        execute: function() {
            FormSelect = (function (_super) {
                __extends(FormSelect, _super);
                function FormSelect() {
                    _super.apply(this, arguments);
                    this.model = new selectModel_1.SelectModel();
                    this.SelectMode = enum_1.FormSelectMode;
                    this.cssClass = String.empty;
                    this.mode = enum_1.FormSelectMode.Item;
                    this.values = [];
                    this.valuesChange = new core_1.EventEmitter();
                    this.maxSelectedItems = 5;
                    this.getItems = function () { };
                }
                FormSelect.prototype.onReady = function () {
                    var self = this;
                    var iconenctor = window.ioc.resolve("IConnector");
                    self.getItems().then(function (items) {
                        self.model.import(items);
                        window.setTimeout(function () {
                            self.dom.val(self.values).trigger("change");
                        }, 0);
                    });
                    this.dom = window.jQuery(String.format("#{0}", self.id)).select2({
                        maximumSelectionLength: self.maxSelectedItems,
                        placeholder: self.placeHolder,
                        allowClear: true
                    });
                    this.dom.on("select2:select", function (item) {
                        if (self.maxSelectedItems === 1) {
                            self.values = [item.params.data.id];
                        }
                        else {
                            self.values.push(item.params.data.id);
                        }
                        self.valuesChange.emit(self.values);
                        return true;
                    });
                    this.dom.on("select2:unselect", function (item) {
                        self.values = self.values.removeItem(item.params.data.id);
                        self.valuesChange.emit(self.values);
                        return true;
                    });
                };
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', String)
                ], FormSelect.prototype, "placeHolder", void 0);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', Array)
                ], FormSelect.prototype, "values", void 0);
                __decorate([
                    core_1.Output(), 
                    __metadata('design:type', Object)
                ], FormSelect.prototype, "valuesChange", void 0);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', Object)
                ], FormSelect.prototype, "maxSelectedItems", void 0);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', Object)
                ], FormSelect.prototype, "getItems", void 0);
                FormSelect = __decorate([
                    core_1.Component({
                        selector: "form-select",
                        templateUrl: "app/common/directives/form/select.html"
                    }), 
                    __metadata('design:paramtypes', [])
                ], FormSelect);
                return FormSelect;
            }(ui_1.BaseControl));
            exports_1("FormSelect", FormSelect);
        }
    }
});
//# sourceMappingURL=select.js.map