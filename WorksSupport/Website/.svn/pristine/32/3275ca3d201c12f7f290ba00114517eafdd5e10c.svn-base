System.register(["angular2/platform/browser", "angular2/core", "angular2/http", "angular2/router", "./common/layouts/default/layout", "./common/helpers/configHelper", "./common/models/ioc/all", "./applicationState"], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var browser_1, core_1, http_1, router_1, layout_1, configHelper_1, all_1, applicationState_1, core_2;
    var injector;
    function handleError(err) {
        console.error(err);
    }
    function onAppBootstraped(appRef) {
        configInjector(appRef.injector);
    }
    function configInjector(injector) {
        applicationState_1.ApplicationStateFactory.getInstance().setInjector(injector);
        window.appState = applicationState_1.ApplicationStateFactory.getInstance();
    }
    function configIoC() {
        var config = configHelper_1.default.getAppConfig();
        var ioc = all_1.IoCFactory.create();
        ioc.import(config.ioc);
        window.ioc = ioc;
        var resourceHelper = window.ioc.resolve("IResource");
        resourceHelper.load(["common", "registration", "configurations"]);
    }
    return {
        setters:[
            function (browser_1_1) {
                browser_1 = browser_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
            },
            function (router_1_1) {
                router_1 = router_1_1;
            },
            function (layout_1_1) {
                layout_1 = layout_1_1;
            },
            function (configHelper_1_1) {
                configHelper_1 = configHelper_1_1;
            },
            function (all_1_1) {
                all_1 = all_1_1;
            },
            function (applicationState_1_1) {
                applicationState_1 = applicationState_1_1;
            }],
        execute: function() {
            injector = core_2.ReflectiveInjector.resolveAndCreate([http_1.HTTP_PROVIDERS, router_1.ROUTER_PROVIDERS]);
            configInjector(injector);
            configIoC();
            core_1.enableProdMode();
            browser_1.bootstrap(layout_1.DefaultLayout, [
                http_1.HTTP_PROVIDERS,
                router_1.ROUTER_PROVIDERS
            ])
                .then(function (appRef) { return onAppBootstraped(appRef); })
                .catch(function (err) { return handleError(err); });
        }
    }
});
//# sourceMappingURL=main.js.map