System.register(["angular2/core", "../../models/ui", "../../helpers/guidHelper"], function (exports_1, context_1) {
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __moduleName = context_1 && context_1.id;
    var core_1, ui_1, guidHelper_1, FormDatePicker;
    return {
        setters: [
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (ui_1_1) {
                ui_1 = ui_1_1;
            },
            function (guidHelper_1_1) {
                guidHelper_1 = guidHelper_1_1;
            }
        ],
        execute: function () {
            FormDatePicker = (function (_super) {
                __extends(FormDatePicker, _super);
                function FormDatePicker() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.id = String.format("date-picker-{0}", guidHelper_1.default.create());
                    _this.modelChange = new core_1.EventEmitter();
                    _this.onValueChanged = new core_1.EventEmitter();
                    _this.minDate = "01/01/1900";
                    _this.maxDate = String.empty;
                    _this.startDate = _this.nowDate();
                    return _this;
                }
                FormDatePicker.prototype.onReady = function () {
                    var self = this;
                    var month;
                    var day;
                    var nowDate = self.nowDate();
                    var daysOfWeek = ["CN", "T2", "T3", "T4", "T5", "T6", "T7"];
                    var monthNames = ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6",
                        "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"];
                    self.DataPicker = window.jQuery("#" + this.id).daterangepicker({
                        singleDatePicker: true,
                        autoUpdateInput: true,
                        format: 'DD/MM/YYYY',
                        startDate: self.checkDate(self.startDate),
                        locale: {
                            format: 'DD/MM/YYYY',
                            separator: " - ",
                            applyLabel: "Apply",
                            cancelLabel: "Cancel",
                            fromLabel: "From",
                            toLabel: "To",
                            customRangeLabel: "Custom",
                            daysOfWeek: daysOfWeek,
                            monthNames: monthNames
                        },
                        firstDay: 1,
                        minDate: self.minDate
                    }, function (selectedValue) {
                        var objDate = new Date(selectedValue);
                        month = objDate.getMonth() + 1 < 10 ? "0" + (objDate.getMonth() + 1) : (objDate.getMonth() + 1).toString();
                        day = objDate.getDate() < 10 ? "0" + objDate.getDate() : objDate.getDate().toString();
                        self.modelChange.emit(day + "/" + month + "/" + objDate.getFullYear());
                    });
                    self.modelChange.emit(nowDate);
                };
                FormDatePicker.prototype.resetDate = function () {
                    var self = this;
                    var month;
                    var day;
                    var nowDate = self.nowDate();
                    var daysOfWeek = ["CN", "T2", "T3", "T4", "T5", "T6", "T7"];
                    var monthNames = ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6",
                        "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"];
                    self.DataPicker.daterangepicker({
                        singleDatePicker: true,
                        autoUpdateInput: true,
                        format: 'DD/MM/YYYY',
                        startDate: self.checkDate(self.startDate),
                        locale: {
                            format: 'DD/MM/YYYY',
                            separator: " - ",
                            applyLabel: "Apply",
                            cancelLabel: "Cancel",
                            fromLabel: "From",
                            toLabel: "To",
                            customRangeLabel: "Custom",
                            daysOfWeek: daysOfWeek,
                            monthNames: monthNames
                        },
                        firstDay: 1,
                        minDate: self.minDate
                    }, function (selectedValue) {
                        var objDate = new Date(selectedValue);
                        month = objDate.getMonth() + 1 < 10 ? "0" + (objDate.getMonth() + 1) : (objDate.getMonth() + 1).toString();
                        day = objDate.getDate() < 10 ? "0" + objDate.getDate() : objDate.getDate().toString();
                        self.modelChange.emit(day + "/" + month + "/" + objDate.getFullYear());
                    });
                };
                FormDatePicker.prototype.resetDateEdit = function (startDate) {
                    var self = this;
                    var month;
                    var day;
                    var nowDate = self.nowDate();
                    var daysOfWeek = ["CN", "T2", "T3", "T4", "T5", "T6", "T7"];
                    var monthNames = ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6",
                        "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"];
                    self.DataPicker.daterangepicker({
                        singleDatePicker: true,
                        autoUpdateInput: true,
                        format: 'DD/MM/YYYY',
                        startDate: self.checkDate(startDate),
                        locale: {
                            format: 'DD/MM/YYYY',
                            separator: " - ",
                            applyLabel: "Apply",
                            cancelLabel: "Cancel",
                            fromLabel: "From",
                            toLabel: "To",
                            customRangeLabel: "Custom",
                            daysOfWeek: daysOfWeek,
                            monthNames: monthNames
                        },
                        firstDay: 1,
                        minDate: self.minDate
                    }, function (selectedValue) {
                        var objDate = new Date(selectedValue);
                        month = objDate.getMonth() + 1 < 10 ? "0" + (objDate.getMonth() + 1) : (objDate.getMonth() + 1).toString();
                        day = objDate.getDate() < 10 ? "0" + objDate.getDate() : objDate.getDate().toString();
                        self.modelChange.emit(day + "/" + month + "/" + objDate.getFullYear());
                    });
                };
                FormDatePicker.prototype.checkDate = function (newDate) {
                    var objDate = new Date();
                    var month = objDate.getMonth() + 1 < 10 ? "0" + (objDate.getMonth() + 1) : (objDate.getMonth() + 1).toString();
                    var day = objDate.getDate() < 10 ? "0" + objDate.getDate() : objDate.getDate().toString();
                    if (newDate !== undefined && newDate !== null) {
                        var currentDate = "";
                        for (var i = newDate.split("/").length - 1; i >= 0; i--) {
                            currentDate += newDate.split("/")[i];
                        }
                        var nowDate = objDate.getFullYear() + month + day;
                        if (parseInt(currentDate) > parseInt(nowDate)) {
                            return this.startDate = newDate;
                        }
                    }
                    return day + "/" + month + "/" + objDate.getFullYear();
                };
                FormDatePicker.prototype.nowDate = function () {
                    var objDate = new Date();
                    var month = objDate.getMonth() + 1 < 10 ? "0" + (objDate.getMonth() + 1) : (objDate.getMonth() + 1).toString();
                    var day = objDate.getDate() < 10 ? "0" + objDate.getDate() : objDate.getDate().toString();
                    return day + "/" + month + "/" + objDate.getFullYear();
                };
                __decorate([
                    core_1.Input(),
                    __metadata("design:type", Object)
                ], FormDatePicker.prototype, "model", void 0);
                __decorate([
                    core_1.Input(),
                    __metadata("design:type", Object)
                ], FormDatePicker.prototype, "placeholder", void 0);
                __decorate([
                    core_1.Input(),
                    __metadata("design:type", Object)
                ], FormDatePicker.prototype, "disabled", void 0);
                __decorate([
                    core_1.Output(),
                    __metadata("design:type", core_1.EventEmitter)
                ], FormDatePicker.prototype, "modelChange", void 0);
                __decorate([
                    core_1.Output(),
                    __metadata("design:type", Object)
                ], FormDatePicker.prototype, "onValueChanged", void 0);
                __decorate([
                    core_1.Input(),
                    __metadata("design:type", String)
                ], FormDatePicker.prototype, "minDate", void 0);
                __decorate([
                    core_1.Input(),
                    __metadata("design:type", String)
                ], FormDatePicker.prototype, "maxDate", void 0);
                __decorate([
                    core_1.Input(),
                    __metadata("design:type", String)
                ], FormDatePicker.prototype, "startDate", void 0);
                FormDatePicker = __decorate([
                    core_1.Component({
                        selector: "form-datepicker",
                        templateUrl: "app/common/directives/form/datePicker.html"
                    })
                ], FormDatePicker);
                return FormDatePicker;
            }(ui_1.BaseControl));
            exports_1("FormDatePicker", FormDatePicker);
        }
    };
});
//# sourceMappingURL=datePicker.js.map