using Library.DataAccess;
using Library.WebCore;
using System;
using System.Collections.Generic;
using Nc.Erp.WorksSupport.Do.Configuration.WorkSupportType;

namespace Nc.Erp.WorksSupport.Da.Configuration.WorkSupportType
{
    /// <summary>
    /// Lương Trung Nhân
    /// created: 08/06/2017
    /// Quyền trên mỗi bước xử lý
    /// </summary>
    public class DaWorksSupportTypeWfPermis
    {
        #region Log Property
        public LogObject ObjLogObject = new LogObject();
        #endregion

        #region Public Methods

        /// <summary>
        /// Tìm kiếm thông tin trạng thái công việc cần hỗ trợ
        /// </summary>
        /// <param name="list"></param>
        /// <param name="objKeywords"></param>
        /// <returns></returns>
        public ResultMessage SearchData(ref List<WorksSupportTypeWfPermis> list, params object[] objKeywords)
        {
            var objResultMessage = new ResultMessage();
            var objIData = Data.CreateData();
            try
            {
                objIData.Connect();
                objIData.CreateNewStoredProcedure(SpSearch);
                objIData.AddParameter(objKeywords);
                var dtbData = objIData.ExecStoreToDataTable();
                list = MyUtils.DataTableExtensions.ToList<WorksSupportTypeWfPermis>(dtbData);
            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, SystemError.ErrorTypes.SearchData, "Lỗi tìm kiếm thông tin trạng thái công việc cần hỗ trợ", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail, "DA_WorksSupportType_WF_Permis -> SearchData", Globals.ModuleName);
                return objResultMessage;
            }
            finally
            {
                objIData.Disconnect();
            }
            return objResultMessage;
        }

        /// <summary>
        /// GetAlll WorksSupportType_WF_Permis 
        /// </summary>
        /// <param name="list"></param>
        /// <returns></returns>
        public ResultMessage GetAll(ref List<WorksSupportTypeWfPermis> list)
        {
            var objResultMessage = new ResultMessage();
            var objIData = Data.CreateData();
            try
            {
                objIData.Connect();
                objIData.CreateNewStoredProcedure(SpSelectAll);
                var dtb = objIData.ExecStoreToDataTable();
                list = MyUtils.DataTableExtensions.ToList<WorksSupportTypeWfPermis>(dtb);
            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, SystemError.ErrorTypes.LoadInfo,
                    "Lỗi nạp thông tin danh sách WorksSupportType_WF_Permis", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail,
                    "DaWorksSupportType_WF_Permis -> GetById", "");
                return objResultMessage;
            }
            finally
            {
                objIData.Disconnect();
            }
            return objResultMessage;
        }

        /// <summary>
        /// Get WorksSupportType_WF_Permis by Id
        /// </summary>
        /// <param name="listWorksSupportTypeWfPermis"></param>
        /// <param name="intWorkSupportStepId"></param>
        /// <param name="objIData"></param>
        /// <returns></returns>
        public ResultMessage GetById(ref List<WorksSupportTypeWfPermis> listWorksSupportTypeWfPermis, int intWorkSupportStepId, IData objIData)
        {
            var objResultMessage = new ResultMessage();
            try
            {
                objIData.CreateNewStoredProcedure(SpSelect);
                objIData.AddParameter("@WORKSSUPPORTSTEPID", intWorkSupportStepId);
                var dtb = objIData.ExecStoreToDataTable();
                listWorksSupportTypeWfPermis = MyUtils.DataTableExtensions.ToList<WorksSupportTypeWfPermis>(dtb);
            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, SystemError.ErrorTypes.LoadInfo,
                    "Lỗi nạp thông tin danh sách WorksSupportType_WF_Permis", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail,
                    "DaWorksSupportType_WF_Permis -> GetById", "");
                return objResultMessage;
            }
            return objResultMessage;
        }

        /// <summary>
        /// Insert data
        /// </summary>
        /// <param name="listWorksSupportTypeWfPermis"></param>
        /// <param name="objIData"></param>
        /// <param name="user"></param>
        /// <returns></returns>
        public ResultMessage Insert(List<WorksSupportTypeWfPermis> listWorksSupportTypeWfPermis, IData objIData, string user)
        {
            var objResultMessage = new ResultMessage();
            //var objIData = Data.CreateData();
            try
            {
                //objIData.Connect();
                if (listWorksSupportTypeWfPermis != null && listWorksSupportTypeWfPermis.Count > 0)
                {
                    foreach (var item in listWorksSupportTypeWfPermis)
                    {
                        Insert(objIData, item, user);
                    }
                }
            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, SystemError.ErrorTypes.Insert, "Lỗi thêm thông tin WorksSupportType_WF_Permis", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail, "DaWorksSupportType_WF_Permis -> Insert", Globals.ModuleName);
                return objResultMessage;
            }
            return objResultMessage;
        }

        /// <summary>
        /// Insert WorksSupportTypeWfPermis
        /// </summary>
        /// <param name="worksSupportTypeWfPermis"></param>
        /// <param name="objIData"></param>
        /// <param name="user"></param>
        /// <returns></returns>
        public ResultMessage InsertWorksFlowPermission(WorksSupportTypeWfPermis worksSupportTypeWfPermis, IData objIData, string user)
        {
            var objResultMessage = new ResultMessage();
            try
            {
                Insert(objIData, worksSupportTypeWfPermis, user);
            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, SystemError.ErrorTypes.Insert, "Lỗi thêm thông tin WorksSupportType_WF_Permis", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail, "DaWorksSupportType_WF_Permis -> Insert", Globals.ModuleName);
                return objResultMessage;
            }
            return objResultMessage;
        }
        /// <summary>
        /// Cập nhật thông tin trạng thái công việc cần hỗ trợ
        /// </summary>
        /// <param name="listWorksSupportTypeWfPermis"></param>
        /// <param name="objIData"></param>
        /// <param name="user"></param>
        /// <returns></returns>
        public ResultMessage Update(List<WorksSupportTypeWfPermis> listWorksSupportTypeWfPermis, IData objIData, string user)
        {
            var objResultMessage = new ResultMessage();
            // var objIData = Data.CreateData();
            try
            {
                //objIData.Connect();
                //objIData.BeginTransaction();
                if (listWorksSupportTypeWfPermis != null && listWorksSupportTypeWfPermis.Count > 0)
                {
                    foreach (var item in listWorksSupportTypeWfPermis)
                    {
                        Update(objIData, item, user);
                    }
                }
                //objIData.CommitTransaction();
            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, SystemError.ErrorTypes.Update, "Lỗi cập nhật thông tin WorksSupportType_WF_Permis", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail, "DaWorksSupportType_WF_Permis -> Update", Globals.ModuleName);
                return objResultMessage;
            }
            return objResultMessage;
        }

        /// <summary>
        /// Xóa trạng thái công việc cần hỗ trợ
        /// </summary>
        /// <param name="lstWorksSupportTypeWfPermis"></param>
        /// <param name="objIData"></param>
        /// <returns></returns>
        public ResultMessage Delete(List<WorksSupportTypeWfPermis> lstWorksSupportTypeWfPermis, IData objIData)
        {
            var objResultMessage = new ResultMessage();
            //var objIData = Data.CreateData();
            try
            {
                //objIData.Connect();
                if (lstWorksSupportTypeWfPermis != null && lstWorksSupportTypeWfPermis.Count > 0)
                {
                    foreach (var item in lstWorksSupportTypeWfPermis)
                    {
                        Delete(objIData, item.WorksSupportStepId);
                    }
                }
            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, SystemError.ErrorTypes.Delete, "Lỗi xóa Delete", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail, "DaWorksSupportType_WF_Permis -> Delete", Globals.ModuleName);
                return objResultMessage;
            }
            return objResultMessage;
        }

        /// <summary>
        /// Delete data by WorksSupportStepId
        /// </summary>
        /// <param name="worksSupportStepId"></param>
        /// <param name="objIData"></param>
        /// <returns></returns>
        public ResultMessage DeleteDataByWorksSupportStepId(int worksSupportStepId, IData objIData)
        {
            var objResultMessage = new ResultMessage();
            try
            {
                Delete(objIData, worksSupportStepId);
            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, SystemError.ErrorTypes.Delete, "Lỗi xóa DeleteDataByWorksSupportStepId", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail, "DaWorksSupportType_WF_Permis -> Delete", Globals.ModuleName);
                return objResultMessage;
            }
            return objResultMessage;
        } 

        #endregion

        #region Protected Methods

        /// <summary>
        /// Thêm trạng thái công việc cần hỗ trợ
        /// </summary>
        /// <param name="objIData"></param>
        /// <param name="objWorksSupportTypeWfPermis"></param>
        /// <param name="user"></param>
        protected virtual void Insert(IData objIData, WorksSupportTypeWfPermis objWorksSupportTypeWfPermis, string user)
        {
            try
            {
                objIData.CreateNewStoredProcedure(SpAdd);

                objIData.AddParameter("@WORKSSUPPORTSTEPID",objWorksSupportTypeWfPermis.WorksSupportStepId);
                objIData.AddParameter("@WORKSSUPPORTMEMBERROLEID",
                    objWorksSupportTypeWfPermis.WorksSupportMemberRoleId);
                objIData.AddParameter("@ISCANEDITCONTENT", objWorksSupportTypeWfPermis.IsCanEditContent);
                objIData.AddParameter("@ISCANEDITSOLUTIONCONTENT",
                    objWorksSupportTypeWfPermis.IsCanEditSolutionContent);
                objIData.AddParameter("@ISCANADDATTACHMENT", objWorksSupportTypeWfPermis.IsCanAddAttachment);
                objIData.AddParameter("@ISCANCOMMENT", objWorksSupportTypeWfPermis.IsCanComment);
                objIData.AddParameter("@ISCOMPLETEDDATE",
                    objWorksSupportTypeWfPermis.IsCanEditExpectedCompletedDate);
                objIData.AddParameter("@ISCANEDITQUALITY", objWorksSupportTypeWfPermis.IsCanEditQuality);
                objIData.AddParameter("@ISCANPROCESSWORKFLOW", objWorksSupportTypeWfPermis.IsCanProcessWorkflow);
                objIData.AddParameter("@ISCANCHANGEPROGRESS", objWorksSupportTypeWfPermis.IsCanChangeProgress);
                objIData.AddParameter("@ISMUSTCHOOSEPROCESSUSER", objWorksSupportTypeWfPermis.IsMustChooseProcessUser);
                
                objIData.AddParameter("@CREATEDUSER", user);
                // Excute query
                objIData.ExecNonQuery();
            }
            catch (Exception)
            {
                objIData.RollBackTransaction();
                throw;
            }
        }

        /// <summary>
        /// Cập nhật trạng thái công việc cần hỗ trợ
        /// </summary>
        /// <param name="objIData"></param>
        /// <param name="objWorksSupportTypeWfPermis"></param>
        /// <param name="user"></param>
        protected virtual void Update(IData objIData, WorksSupportTypeWfPermis objWorksSupportTypeWfPermis, string user)
        {
            try
            {
                objIData.CreateNewStoredProcedure(SpUpdate);
                objIData.AddParameter("@WORKSSUPPORTSTEPID", objWorksSupportTypeWfPermis.WorksSupportStepId);
                objIData.AddParameter("@WORKSSUPPORTMEMBERROLEID", objWorksSupportTypeWfPermis.WorksSupportMemberRoleId);
                objIData.AddParameter("@UPDATEDUSER", user);
                objIData.ExecNonQuery();
            }
            catch (Exception)
            {
                objIData.RollBackTransaction();
                throw;
            }
        }

        /// <summary>
        /// Xóa trạng thái công việc cần hỗ trợ
        /// </summary>
        /// <param name="objIData"></param>
        /// <param name="worksSupportStepId"></param>
        protected void Delete(IData objIData, int worksSupportStepId)
        {
            try
            {
                objIData.CreateNewStoredProcedure(SpDelete);
                objIData.AddParameter("@WORKSSUPPORTSTEPID", worksSupportStepId);
                objIData.ExecNonQuery();
            }
            catch (Exception)
            {
                objIData.RollBackTransaction();
                throw;
            }
        }
        #endregion

        #region Stored Procedure Names

        public const string SpSelectAll = "EO_WORKSSUPPORTTYPE_WF_P_GETALL";
        public const string SpSelect = "EO_WORKSSUPPORTTYPE_WF_P_SEL";
        public const string SpAdd = "EO_WORKSSUPPORTTYPE_WF_P_ADD";
        public const string SpUpdate = "EO_WorksSupportType_WF_Permis_UPD";
        public const string SpDelete = "EO_WORKSSUPPORTTYPE_WF_P_DEL";
        public const string SpSearch = "EO_WORKSSUPPORTTYPE_WF_P_SRH";
        #endregion
    }
}
