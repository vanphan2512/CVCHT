using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Nc.Erp.WorksSupport.Api.Common;
using Nc.Erp.WorksSupport.Api.Models.WorkSupportQuality;
using Nc.Erp.WorksSupport.Da.Configuration;
using Nc.Erp.WorksSupport.Do.Configuration;
using Nc.Erp.WorksSupport.Do.Configuration.Quality;

namespace Nc.Erp.WorksSupport.Api.Features.WorksSupport
{
    /// <summary>
    /// Created by      : Lương Trung Nhân
    /// Created date    : 30/05/2017
    /// Api độ trạng thái "ERP.EO.WORKSSUPPORTQuality"
    /// </summary>
    [RoutePrefix("api/v2/Qualities")]
    public class QualityController : BaseController
    {
        /// <summary>
        /// Tìm kiếm chất lượng yêu cầu công việc cần hỗ trợ theo keyword
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [Route("Search")]
        public Response<List<WorksSupportQuality>> Search([FromUri] SearchParam objparam)
        {
            // Definition object to return.
            var ret = new Response<List<WorksSupportQuality>>();
            try
            {
                // Definition object return
                var listWorksSupportQuality = new List<WorksSupportQuality>();

                //object param
                object[] objKeywords = new object[] 
                { 
                    "@KEYWORDS", objparam.Keywords,
                    "@ISDELETED",objparam.IsDeleted,
                    "@PAGEINDEX", objparam.PageIndex,
                    "@PAGESIZE", objparam.PageSize
                };
                // Call DaSystemManagement to search data.
                var objResultMessage = new DaWorksSupportQuality().SearchData(ref listWorksSupportQuality, objKeywords);

                if (listWorksSupportQuality != null)
                {
                    ret.Success = true;
                    ret.Data = listWorksSupportQuality;
                    ret.TotalRecord = listWorksSupportQuality.Count;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }
                // Return data.
                return ret;
            }
            catch (Exception e)
            {
                var desc = e.InnerException != null ? e.InnerException.ToString() : e.Message;
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }
        /// <summary>
        /// Lấy danh sách chất lượng yêu cầu công việc cần hỗ trợ
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [Route("")]
        public Response<List<WorksSupportQuality>> GetAll()
        {
            // Definition object to return.
            var ret = new Response<List<WorksSupportQuality>>();
            try
            {
                // Definition object return
                var listWorksSupportQuality = new List<WorksSupportQuality>();

                // Call DaSystemManagement to search data.
                var objResultMessage = new DaWorksSupportQuality().GetAll(ref listWorksSupportQuality);

                if (listWorksSupportQuality != null)
                {
                    ret.Success = true;
                    ret.Data = listWorksSupportQuality;
                    ret.TotalRecord = listWorksSupportQuality.Count;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }
                // Return data.
                return ret;
            }
            catch (Exception e)
            {
                var desc = e.InnerException != null ? e.InnerException.ToString() : e.Message;
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }

        [HttpGet]
        [Route("QualitiesActived")]
        public Response<List<WorksSupportQuality>> QualitiesActived()
        {
            // Definition object to return.
            var ret = new Response<List<WorksSupportQuality>>();
            try
            {
                // Definition object return
                var listWorksSupportQuality = new List<WorksSupportQuality>();

                // Call DaSystemManagement to search data.
                var objResultMessage = new DaWorksSupportQuality().GetAllActived(ref listWorksSupportQuality);

                if (listWorksSupportQuality != null)
                {
                    ret.Success = true;
                    ret.Data = listWorksSupportQuality;
                    ret.TotalRecord = listWorksSupportQuality.Count;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }
                // Return data.
                return ret;
            }
            catch (Exception e)
            {
                var desc = e.InnerException != null ? e.InnerException.ToString() : e.Message;
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }
        /// <summary>
        /// Lấy chất lượng yêu cầu công việc cần hỗ trợ theo ID
        /// </summary>
        /// <param name="objparam"></param>
        /// <returns></returns>
        [HttpGet]
        [Route("{id}")]
        public Response<WorksSupportQuality> GetById([FromUri] GetByParam objparam)
        {
            // Definition object to return.
            var ret = new Response<WorksSupportQuality>();
            try
            {
                //validate param
                ValidateParams(objparam);
                // Definition object return
                var obj = new WorksSupportQuality();

                // Call DaWorksSupportQuality to search data.
                var objResultMessage = new DaWorksSupportQuality().GetById(ref obj, objparam.Id);

                if (obj != null)
                {
                    ret.Success = true;
                    ret.Data = obj;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }
                // Return data.
                return ret;
            }
            catch (Exception e)
            {

                var desc = string.Empty;
                if (e.InnerException != null)
                {
                    desc = e.InnerException.ToString();
                }
                else
                {
                    desc = e.Message;
                }
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }

        /// <summary>
        /// Xóa chất lượng yêu cầu công việc cần hỗ trợ theo ID
        /// </summary>
        /// <param name="objparam"></param>
        /// <returns></returns>
        [HttpPost]
        [Route("Delete")]
        public Response<WorksSupportQuality> Delete([FromBody] DeleteParam objparam)
        {
            // Definition object to return.
            var ret = new Response<WorksSupportQuality>();
            try
            {
                //Validate param
                ValidateParams(objparam);
                // Call DaWorksSupportQuality to search data.
                var objResultMessage = new DaWorksSupportQuality().Delete(objparam.User, objparam.Id);

                if (!objResultMessage.IsError)
                {
                    ret.Success = true;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }
                // Return data.
                return ret;
            }
            catch (Exception e)
            {
                var desc = string.Empty;
                if (e.InnerException != null)
                {
                    desc = e.InnerException.ToString();
                }
                else
                {
                    desc = e.Message;
                }
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }

        [HttpPost]
        [Route("insertBy")]
        public Response<WorksSupportQuality> SaveDataBy([FromBody] SaveParamBy objparam)
        {
            // Definition object to return.
            var ret = new Response<WorksSupportQuality>();
            try
            {
                //validate param
                ValidateParams(objparam);

                // check name is existed in database
                var objCheck = new WorksSupportQualityValidation();
                var listError = new List<ValidationError>();
                var objChekName = new DaWorksSupportQuality().CheckNameExisted(ref objCheck, objparam.Id, objparam.WorksSupportQualityName, objparam.OrderIndex);
                if (objCheck.CountName >= 1)
                {
                    var error = new ValidationError();
                    error.Key = "WorksSupportQualityName";
                    error.Message = "NCS-000001: Tên chất lượng đã tồn tại!";
                    listError.Add(error);
                }
                if (objCheck.CountOrderIndex == 0)
                {
                    var error = new ValidationError();
                    error.Key = "OrderIndex";
                    error.Message = "NCS-000002: Thứ tự hiển thị không tồn tại!";
                    listError.Add(error);
                }
                if (listError.Count > 0)
                {
                    ret.Success = false;
                    ret.Errors = listError;
                    return ret;
                }
                else
                {
                    var obj = new WorksSupportQuality()
                    {
                        WorksSupportQualityId = objparam.Id,
                        WorksSupportQualityName = objparam.WorksSupportQualityName,
                        Description = objparam.Description,
                        OrderIndex = objparam.OrderIndex,
                        IsActived = objparam.IsActived == 1 ? true : false,
                        IsSystem = objparam.IsSystem == 1 ? true : false,
                        IconUrl = objparam.IconUrl,
                        UpdatedUser = objparam.User,
                        CreatedUser = objparam.User
                    };

                    // Call DaWorksSupportStatus to search data.
                    var objResultMessage = new DaWorksSupportQuality().Insert(obj, ref obj);

                    if (!objResultMessage.IsError)
                    {
                        ret.Success = true;
                        ret.Data = obj;
                    }
                    else
                    {
                        ret.Success = false;
                        ret.Message = objResultMessage.Message;
                    }
                }
                // Definition object return

                // Return data.
                return ret;
            }
            catch (Exception e)
            {

                var desc = string.Empty;
                if (e.InnerException != null)
                {
                    desc = e.InnerException.ToString();
                }
                else
                {
                    desc = e.Message;
                }
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }

        [HttpPost]
        [Route("save")]
        public ResponseV1<WorksSupportQuality> SaveData([FromBody] SaveParamBy objparam)
        {
            // Definition object to return.
            var ret = new Response<WorksSupportQuality>();
            var result = new ResponseV1<WorksSupportQuality>();
            ret = SaveDataBy(objparam);
            if (ret != null)
            {
                result.data = new List<WorksSupportQuality> { ret.Data };
            }
            return result;
        }

        /// <summary>
        /// Lấy chất lượng yêu cầu công việc cần hỗ trợ theo ID
        /// </summary>
        /// <param name="objparam"></param>
        /// <returns></returns>
        [HttpGet]
        [Route("loadQuanlities/{id}")]
        public Response<List<WorksSupportQuality>> QualitiesActived([FromUri] int worksId)
        {
            // Definition object to return.
            var ret = new Response<List<WorksSupportQuality>>();
            try
            {
                // Definition object return
                var listWorksSupportQuality = new List<WorksSupportQuality>();

                // Call DaSystemManagement to search data.
                var objResultMessage = new DaWorksSupportQuality().GetQualityByWorksId(ref listWorksSupportQuality, worksId);

                if (listWorksSupportQuality != null)
                {
                    ret.Success = true;
                    ret.Data = listWorksSupportQuality;
                    ret.TotalRecord = listWorksSupportQuality.Count;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }
                // Return data.
                return ret;
            }
            catch (Exception e)
            {
                var desc = e.InnerException != null ? e.InnerException.ToString() : e.Message;
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }
    }
}
