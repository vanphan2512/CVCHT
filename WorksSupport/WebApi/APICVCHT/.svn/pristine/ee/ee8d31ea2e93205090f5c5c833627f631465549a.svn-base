using Nc.Erp.WorksSupport.Api.Common;
using Nc.Erp.WorksSupport.Api.Models.Work;
using Nc.Erp.WorksSupport.Da.Configuration.Works;
using Nc.Erp.WorksSupport.Do.Configuration.Work;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;

namespace Nc.Erp.WorksSupport.Api.Features.WorksSupport
{
    /// <summary>
    /// Created by      : NGUYEN THI KIM NGAN
    /// Created date    : 06.07.22017
    /// Api cong viec "ERP.EO.WORKS"
    /// </summary>
    [RoutePrefix("api/v2/works")]
    public class WorkController : ApiController
    {
        /// <summary>
        /// Tìm kiếm cong viec theo keyword
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [Route("Search")]
        public Response<List<Work>> Search([FromUri] SearchParam objparam)
        {
            // Definition object to return.
            var ret = new Response<List<Work>>();
            try
            {
                // Definition object return
                var listWork = new List<Work>();

                //object param
                object[] objKeywords = new object[]
                {
                    "@PROJECTID", objparam.ProjectIds,
                    "@KEYWORDS",objparam.Keywords,
                    "@STARTDATE", objparam.StartDate,
                    "@ENDDATE", objparam.EndDate,
                    "@PAGEINDEX", objparam.PageIndex,
                    "@PAGESIZE", objparam.PageSize
                };
                //string projectId = objparam.ProjectIds =  ? "-1" : objparam.ProjectIds;
                // Call DaSystemManagement to search data.
                var objResultMessage = new DaWorks().SearchData(ref listWork, objparam.ProjectIds,objparam.TypeSearch, objparam.Keywords, objparam.StartDate, objparam.EndDate, objparam.PageIndex, objparam.PageSize);

                if (listWork != null)
                {
                    ret.Success = true;
                    ret.Data = listWork;
                    ret.TotalRecord = listWork.Count;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }
                // Return data.
                return ret;
            }
            catch (Exception e)
            {

                var desc = string.Empty;
                if (e.InnerException != null)
                {
                    desc = e.InnerException.ToString();
                }
                else
                {
                    desc = e.Message;
                }
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }

        [HttpPost]
        [Route("insertBy")]
        public Response<List<WorksSupport_Works>> SaveDataBy([FromBody] SaveWS_Works objparam)
        {
            // Definition object to return.
            var ret = new Response<List<WorksSupport_Works>>();
            try
            {
                // Definition object return
                var listWork = new List<WorksSupport_Works>();
                // Call DaWorksSupportStatus to search data.
                var objResultMessage = new DaWorksSupport_Works().Insert(objparam.WorksSupportId,objparam.WorksId,objparam.Note, ref listWork);
                if (!objResultMessage.IsError)
                {
                    ret.Success = true;
                    ret.Data = listWork;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }
                // Return data.
                return ret;
            }
            catch (Exception e)
            {

                var desc = string.Empty;
                if (e.InnerException != null)
                {
                    desc = e.InnerException.ToString();
                }
                else
                {
                    desc = e.Message;
                }
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }

        [HttpPost]
        [Route("searchInvole")]
        public Response<List<Work>> SearchInvole([FromBody] SearchInvoleParam objparam)
        {
            // Definition object to return.
            var ret = new Response<List<Work>>();
            try
            {
                // Definition object return
                var listWorksSupportStatus = new List<Work>();

                //object param
                object[] objKeywords = new object[]
                {
                    "@WORKSID", objparam.WorksId,
                    "@NOTE",objparam.Note
                };
                string item = Convert.ToString(objparam.WorksId);
                //var lstWorkInID = item.Split(',');
                for (int i = 0; i < objparam.WorksId.Count(); i++)
                {
                    string note = "";// objparam.Note[i];
                    var objResultMessage = new DaWorks().SearchDataInvole(ref listWorksSupportStatus, objparam.WorksId[i],note);
                    // Call DaSystemManagement to search data.

                    if (listWorksSupportStatus != null)
                    {
                        ret.Success = true;
                        ret.Data = listWorksSupportStatus;
                        ret.TotalRecord = listWorksSupportStatus.Count;
                    }
                    else
                    {
                        ret.Success = false;
                        ret.Message = objResultMessage.Message;
                    }
                }
               
                // Return data.
                return ret;
            }
            catch (Exception e)
            {

                var desc = string.Empty;
                if (e.InnerException != null)
                {
                    desc = e.InnerException.ToString();
                }
                else
                {
                    desc = e.Message;
                }
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }

        /// <summary>
        /// Xóa trạng thái công việc cần hỗ trợ theo ID
        /// </summary>
        /// <param name="objparam"></param>
        /// <returns></returns>
        [HttpPost]
        [Route("Del")]
        public Response<Work> Delete([FromBody] DeletedInvoleParam objparam)
        {
            // Definition object to return.
            var ret = new Response<Work>();
            try
            {
                //Validate param
                //ValidateParams(objparam);
                // Call DaWorksSupportStatus to search data.
                var objResultMessage = new DaWorks().Delete(objparam.User, objparam.Id);

                if (!objResultMessage.IsError)
                {
                    ret.Success = true;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }
                // Return data.
                return ret;
            }
            catch (Exception e)
            {
                var desc = string.Empty;
                if (e.InnerException != null)
                {
                    desc = e.InnerException.ToString();
                }
                else
                {
                    desc = e.Message;
                }
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }

        [HttpGet]
        [Route("")]
        public Response<List<Work>> LoadInvole()
        {
            // Definition object to return.
            var ret = new Response<List<Work>>();
            try
            {
                // Definition object return
                var listWorksSupportStatus = new List<Work>();

                var objResultMessage = new DaWorks().LoadAllInvole(ref listWorksSupportStatus);
                    // Call DaSystemManagement to search data.

                    if (listWorksSupportStatus != null)
                    {
                        ret.Success = true;
                        ret.Data = listWorksSupportStatus;
                        ret.TotalRecord = listWorksSupportStatus.Count;
                    }
                    else
                    {
                        ret.Success = false;
                        ret.Message = objResultMessage.Message;
                    }

                // Return data.
                return ret;
            }
            catch (Exception e)
            {

                var desc = string.Empty;
                if (e.InnerException != null)
                {
                    desc = e.InnerException.ToString();
                }
                else
                {
                    desc = e.Message;
                }
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }
    }
}
