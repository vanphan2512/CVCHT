using Library.DataAccess;
using Library.WebCore;
using Nc.Erp.WorksSupport.Do.Configuration;
using Nc.Erp.WorksSupport.Do.Configuration.Group;
using System;
using System.Collections.Generic;
using System.Data;


namespace Nc.Erp.WorksSupport.Da.Configuration.Group
{
    /// <summary>
    /// Created by      : Nguyen Thi Kim Ngan
    /// Created date    : 08/06/2017
    /// Xử lý nghiệp vụ đối tượng ERP.EO_WORKSSUPPORTGROUP.
    /// </summary>
    public class DaWorksSupportGroup
    {
        #region Log Property
        public LogObject ObjLogObject = new LogObject();
        #endregion

        #region Public Methods
        /// <summary>
        /// Tìm kiếm thông tin nhom công việc cần hỗ trợ
        /// </summary>
        /// <param name="dtbData"></param>
        /// <param name="objKeywords"></param>
        /// <returns></returns>
        public ResultMessage SearchData(ref List<WorksSupportGroup> list, params object[] objKeywords)
        {
            ResultMessage objResultMessage = new ResultMessage();
            IData objIData = Data.CreateData();
            try
            {
                objIData.Connect();
                objIData.CreateNewStoredProcedure(SpSearch);
                objIData.AddParameter(objKeywords);
                DataTable dtbData = objIData.ExecStoreToDataTable();
                list = MyUtils.DataTableExtensions.ToList<WorksSupportGroup>(dtbData);
            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, Library.WebCore.SystemError.ErrorTypes.SearchData, "Lỗi tìm kiếm thông tin nhóm công việc cần hỗ trợ", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail, "DA_WorksSupportGroup -> SearchData", Globals.ModuleName);
                return objResultMessage;
            }
            finally
            {
                objIData.Disconnect();
            }
            return objResultMessage;
        }

        /// <summary>
        /// Get WorksSupportGroup by Id
        /// </summary>
        /// <param name="objWorksSupportStatus"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public ResultMessage GetById(ref List<WorksSupportGroup> lstWorkGroup, int intWorkSupportProjectID)
        {
            var objResultMessage = new ResultMessage();
            var objIData = Data.CreateData();
            try
            {
                objIData.Connect();
                objIData.CreateNewStoredProcedure(SpSearchByID);
                objIData.AddParameter("@WORKSSUPPORTPROJECTID", intWorkSupportProjectID);
                IDataReader reader = objIData.ExecStoreToDataReader();
                while (reader.Read())
                {
                    WorksSupportGroup objWorksSupportGroup = new WorksSupportGroup();
                    if (!Convert.IsDBNull(reader["WORKSSUPPORTGROUPID"])) objWorksSupportGroup.WorksSupportGroupId = Convert.ToInt32(reader["WORKSSUPPORTGROUPID"]);
                    if (!Convert.IsDBNull(reader["WORKSSUPPORTGROUPNAME"])) objWorksSupportGroup.WorksSupportGroupName = Convert.ToString(reader["WORKSSUPPORTGROUPNAME"]).Trim();
                    if (!Convert.IsDBNull(reader["WORKSSUPPORTPROJECTID"])) objWorksSupportGroup.WorksSupportProjectId = Convert.ToInt32(reader["WORKSSUPPORTPROJECTID"]);
                    if (!Convert.IsDBNull(reader["DESCRIPTION"])) objWorksSupportGroup.Description = Convert.ToString(reader["DESCRIPTION"]);
                    if (!Convert.IsDBNull(reader["ORDERINDEX"])) objWorksSupportGroup.OrderIndex = Convert.ToInt32(reader["ORDERINDEX"]);
                    if (!Convert.IsDBNull(reader["ISACTIVE"])) objWorksSupportGroup.IsActived = Convert.ToInt32(reader["ISACTIVE"]);
                    if (!Convert.IsDBNull(reader["ISSYSTEM"])) objWorksSupportGroup.IsSystem = Convert.ToInt32(reader["ISSYSTEM"]);
                    if (!Convert.IsDBNull(reader["CREATEDUSER"])) objWorksSupportGroup.CreatedUser = Convert.ToString(reader["CREATEDUSER"]);
                    if (!Convert.IsDBNull(reader["CREATEDDATE"])) objWorksSupportGroup.CreatedDate = Convert.ToDateTime(reader["CREATEDDATE"]);
                    if (!Convert.IsDBNull(reader["UPDATEDUSER"])) objWorksSupportGroup.UpdatedUser = Convert.ToString(reader["UPDATEDUSER"]);
                    if (!Convert.IsDBNull(reader["UPDATEDDATE"])) objWorksSupportGroup.UpdatedDate = Convert.ToDateTime(reader["UPDATEDDATE"]);
                    if (!Convert.IsDBNull(reader["ISDELETED"])) objWorksSupportGroup.IsDeleted = Convert.ToInt32(reader["ISDELETED"]);
                    if (!Convert.IsDBNull(reader["DELETEDUSER"])) objWorksSupportGroup.DeletedUser = Convert.ToString(reader["DELETEDUSER"]);
                    if (!Convert.IsDBNull(reader["DELETEDDATE"])) objWorksSupportGroup.DeletedDate = Convert.ToDateTime(reader["DELETEDDATE"]);
                    lstWorkGroup.Add(objWorksSupportGroup);
                }
            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, SystemError.ErrorTypes.LoadInfo,
                    "Lỗi nạp thông tin danh sách WorksSupportGroup", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail,
                    "DaWorksSupportGroup -> GetById", "");
                return objResultMessage;
            }
            finally
            {
                objIData.Disconnect();
            }
            return objResultMessage;
        }

        /// <summary>
        /// get work support group by project id
        /// </summary>
        /// <param name="lstWorkGroup"></param>
        /// <param name="intWorkSupportProjectId"></param>
        /// <param name="intIsDeleted"></param>
        /// <returns></returns>
        public ResultMessage GetAllByProjectId(ref List<WorksSupportGroup> lstWorkGroup, int intWorkSupportProjectId)
        {
            var objResultMessage = new ResultMessage();
            var objIData = Data.CreateData();
            try
            {
                objIData.Connect();
                objIData.CreateNewStoredProcedure(SpGetAllByProjectId);
                objIData.AddParameter("@PROJECTID", intWorkSupportProjectId);
                IDataReader reader = objIData.ExecStoreToDataReader();
                while (reader.Read())
                {
                    WorksSupportGroup objWorksSupportGroup = new WorksSupportGroup();
                    if (!Convert.IsDBNull(reader["WORKSSUPPORTGROUPID"])) objWorksSupportGroup.WorksSupportGroupId = Convert.ToInt32(reader["WORKSSUPPORTGROUPID"]);
                    if (!Convert.IsDBNull(reader["WORKSSUPPORTGROUPNAME"])) objWorksSupportGroup.WorksSupportGroupName = Convert.ToString(reader["WORKSSUPPORTGROUPNAME"]).Trim();
                    //if (!Convert.IsDBNull(reader["WORKSSUPPORTPROJECTID"])) objWorksSupportGroup.WorksSupportProjectId = Convert.ToInt32(reader["WORKSSUPPORTPROJECTID"]);
                    if (!Convert.IsDBNull(reader["DESCRIPTION"])) objWorksSupportGroup.Description = Convert.ToString(reader["DESCRIPTION"]);
                    if (!Convert.IsDBNull(reader["ORDERINDEX"])) objWorksSupportGroup.OrderIndex = Convert.ToInt32(reader["ORDERINDEX"]);
                    if (!Convert.IsDBNull(reader["ISACTIVE"])) objWorksSupportGroup.IsActived = Convert.ToInt32(reader["ISACTIVE"]);
                    if (!Convert.IsDBNull(reader["ISSYSTEM"])) objWorksSupportGroup.IsSystem = Convert.ToInt32(reader["ISSYSTEM"]);
                    if (!Convert.IsDBNull(reader["CREATEDUSER"])) objWorksSupportGroup.CreatedUser = Convert.ToString(reader["CREATEDUSER"]);
                    if (!Convert.IsDBNull(reader["CREATEDDATE"])) objWorksSupportGroup.CreatedDate = Convert.ToDateTime(reader["CREATEDDATE"]);
                    if (!Convert.IsDBNull(reader["UPDATEDUSER"])) objWorksSupportGroup.UpdatedUser = Convert.ToString(reader["UPDATEDUSER"]);
                    if (!Convert.IsDBNull(reader["UPDATEDDATE"])) objWorksSupportGroup.UpdatedDate = Convert.ToDateTime(reader["UPDATEDDATE"]);
                    if (!Convert.IsDBNull(reader["ISDELETED"])) objWorksSupportGroup.IsDeleted = Convert.ToInt32(reader["ISDELETED"]);
                    if (!Convert.IsDBNull(reader["DELETEDUSER"])) objWorksSupportGroup.DeletedUser = Convert.ToString(reader["DELETEDUSER"]);
                    if (!Convert.IsDBNull(reader["DELETEDDATE"])) objWorksSupportGroup.DeletedDate = Convert.ToDateTime(reader["DELETEDDATE"]);
                    lstWorkGroup.Add(objWorksSupportGroup);
                }
            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, SystemError.ErrorTypes.LoadInfo,
                    "Lỗi nạp thông tin danh sách WorksSupportGroup", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail,
                    "DaWorksSupportGroup -> GetAllByProjectId", "");
                return objResultMessage;
            }
            finally
            {
                objIData.Disconnect();
            }
            return objResultMessage;
        }

        /// <summary>
        /// Insert data
        /// </summary>
        /// <param name="objWorksSupportStatus"></param>
        /// <returns></returns>
        public ResultMessage Insert(WorksSupportGroup objWorksSupportStatus)
        {
            var objResultMessage = new ResultMessage();
            var objIData = Data.CreateData();
            try
            {
                objIData.Connect();
                if (objWorksSupportStatus.WorksSupportGroupId > 0)
                {
                    UpdateGroup(objIData, objWorksSupportStatus);
                }
                else
                {
                    InsertGroup(objIData, objWorksSupportStatus);
                }
            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, SystemError.ErrorTypes.Insert, "Lỗi thêm thông tin WorksSupportStatus", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail, "DaWorksSupportStatus -> Insert", Globals.ModuleName);
                return objResultMessage;
            }
            finally
            {
                objIData.Disconnect();
            }
            return objResultMessage;
        }

        /// <summary>
        /// Cập nhật thông tin trạng thái công việc cần hỗ trợ
        /// </summary>
        /// <param name="objWorksSupportStatus"></param>
        /// <returns></returns>
        public ResultMessage Update(WorksSupportGroup objWorksSupportGroup)
        {
            var objResultMessage = new ResultMessage();
            var objIData = Data.CreateData();
            try
            {
                objIData.Connect();
                objIData.BeginTransaction();
                UpdateGroup(objIData, objWorksSupportGroup);
                objIData.CommitTransaction();
            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, SystemError.ErrorTypes.Update, "Lỗi cập nhật thông tin WorksSupportStatus", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail, "DaWorksSupportStatus -> Update", Globals.ModuleName);
                return objResultMessage;
            }
            finally
            {
                objIData.Disconnect();
            }
            return objResultMessage;
        }

        /// <summary>
        /// Xóa nhom công việc cần hỗ trợ
        /// </summary>
        /// <param name="objWorksSupportStatus"></param>
        /// <returns></returns>
        public ResultMessage Delete(string DeleteUer, string strWorksSupportGroupID)
        {
            var objResultMessage = new ResultMessage();
            var objIData = Data.CreateData();
            try
            {
                objIData.Connect();
                var lstStatusID = strWorksSupportGroupID.Split(',');
                for (int i = 0; i < lstStatusID.Length; i++)
                {
                    if (string.IsNullOrEmpty(lstStatusID[i]))
                        continue;
                    var ID = lstStatusID[i];
                    int StatusID = Convert.ToInt32(ID);
                    DeleteStatus(objIData, DeleteUer, StatusID);
                }
            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, SystemError.ErrorTypes.Delete, "Lỗi xóa WorksSuportStatus", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail, "DaWorksSupportStatus -> Delete", Globals.ModuleName);
                return objResultMessage;
            }
            finally
            {
                objIData.Disconnect();
            }
            return objResultMessage;
        }
        #endregion

        #region Protected Methods
        /// <summary>
        /// Thêm trạng thái công việc cần hỗ trợ
        /// </summary>
        /// <param name="objIData"></param>
        /// <param name="objWorksSupportStatus"></param>
        protected virtual void InsertGroup(IData objIData, WorksSupportGroup objWorksSupportGroup)
        {
            try
            {
                objIData.CreateNewStoredProcedure(SpAdd);
                objIData.AddParameter("@WORKSSUPPORTGROUPNAME", objWorksSupportGroup.WorksSupportGroupName);
                objIData.AddParameter("@WORKSSUPPORTPROJECTID", objWorksSupportGroup.WorksSupportProjectId);
                objIData.AddParameter("@DESCRIPTION", objWorksSupportGroup.Description);
                objIData.AddParameter("@ISACTIVE", objWorksSupportGroup.IsActived);
                objIData.AddParameter("@ISSYSTEM", objWorksSupportGroup.IsSystem);
                objIData.AddParameter("@CREATEDUSER", objWorksSupportGroup.CreatedUser);
                objIData.AddParameter("@CERTIFICATESTRING", ObjLogObject.CertificateString);
                objIData.AddParameter("@USERHOSTADDRESS", ObjLogObject.UserHostAddress);
                objIData.AddParameter("@LOGINLOGID", ObjLogObject.LoginLogID);
                objIData.ExecNonQuery();
            }
            catch (Exception ex)
            {
                objIData.RollBackTransaction();
                throw;
            }
        }
        /// <summary>
        /// Cập nhật nhóm công việc cần hỗ trợ
        /// </summary>
        /// <param name="objIData"></param>
        /// <param name="objWorksSupportStatus"></param>
        protected virtual void UpdateGroup(IData objIData, WorksSupportGroup objWorksSupportGroup)
        {
            try
            {
                objIData.CreateNewStoredProcedure(SpUpdate);
                objIData.AddParameter("@WORKSSUPPORTGROUPID", objWorksSupportGroup.WorksSupportGroupId);
                objIData.AddParameter("@WORKSSUPPORTGROUPNAME", objWorksSupportGroup.WorksSupportGroupName);
                objIData.AddParameter("@WORKSSUPPORTPROJECTID", objWorksSupportGroup.WorksSupportProjectId);
                objIData.AddParameter("@DESCRIPTION", objWorksSupportGroup.Description);
                objIData.AddParameter("@ISACTIVE", objWorksSupportGroup.IsActived);
                objIData.AddParameter("@ISSYSTEM", objWorksSupportGroup.IsSystem);
                objIData.AddParameter("@UPDATEDUSER", objWorksSupportGroup.UpdatedUser);
                objIData.AddParameter("@CERTIFICATESTRING", ObjLogObject.CertificateString);
                objIData.AddParameter("@USERHOSTADDRESS", ObjLogObject.UserHostAddress);
                objIData.AddParameter("@LOGINLOGID", ObjLogObject.LoginLogID);

                objIData.ExecNonQuery();
            }
            catch (Exception)
            {
                objIData.RollBackTransaction();
                throw;
            }
        }

        /// <summary>
        /// Xóa trạng thái công việc cần hỗ trợ
        /// </summary>
        /// <param name="objIData"></param>
        /// <param name="objWorksSupportStatus"></param>
        protected void DeleteStatus(IData objIData, string DeleteUser, int intWorksSupportGroupId)
        {
            try
            {
                objIData.CreateNewStoredProcedure(SpDelete);
                objIData.AddParameter("@WORKSSUPPORTGROUPID", intWorksSupportGroupId);
                objIData.AddParameter("@DELETEDUSER", DeleteUser);
                objIData.AddParameter("@CERTIFICATESTRING", ObjLogObject.CertificateString);
                objIData.AddParameter("@USERHOSTADDRESS", ObjLogObject.UserHostAddress);
                objIData.AddParameter("@LOGINLOGID", ObjLogObject.LoginLogID);
                objIData.ExecNonQuery();
            }
            catch (Exception)
            {
                objIData.RollBackTransaction();
                throw;
            }
        }

        /// <summary>
        /// get all member in work group
        /// </summary>
        /// <param name="lstGroupMember"></param>
        /// <param name="intWorkGroupId"></param>
        /// <returns></returns>
        public ResultMessage GetAllMemberByGroupId(ref List<WorkGroupMember> lstGroupMember, int intWorkGroupId)
        {
            var objResultMessage = new ResultMessage();
            var objIData = Data.CreateData();
            try
            {
                objIData.Connect();
                objIData.CreateNewStoredProcedure(SpGetAllMemberByGroupId);
                objIData.AddParameter("@WORKSGROUPID", intWorkGroupId);
                IDataReader reader = objIData.ExecStoreToDataReader();
                while (reader.Read())
                {
                    WorkGroupMember objGroupMember = new WorkGroupMember();
                    if (!Convert.IsDBNull(reader["USERNAME"])) objGroupMember.UserId = Convert.ToInt32(reader["USERNAME"]);
                    if (!Convert.IsDBNull(reader["FULLNAME"])) objGroupMember.FullName = Convert.ToString(reader["FULLNAME"]);
                    if (!Convert.IsDBNull(reader["DEFAULTPICTUREURL"])) objGroupMember.DefaultPictureUrl = Convert.ToString(reader["DEFAULTPICTUREURL"]).Trim();
                    if (!Convert.IsDBNull(reader["DEPARTMENTNAME"])) objGroupMember.DepartmentName = Convert.ToString(reader["DEPARTMENTNAME"]);
                    if (!Convert.IsDBNull(reader["WORKSSUPPORTMEMBERROLEID"])) objGroupMember.MemberRoleId = Convert.ToInt32(reader["WORKSSUPPORTMEMBERROLEID"]);
                    if (!Convert.IsDBNull(reader["WORKSSUPPORTMEMBERROLENAME"])) objGroupMember.MemberRoleName = Convert.ToString(reader["WORKSSUPPORTMEMBERROLENAME"]);
                    
                    lstGroupMember.Add(objGroupMember);
                }
            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, SystemError.ErrorTypes.LoadInfo,
                    "Lỗi nạp thông tin thành viên trong nhóm công việc", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail,
                    "DaWorksSupportGroup -> GetAllMemberByGroupId", "");
                return objResultMessage;
            }
            finally
            {
                objIData.Disconnect();
            }
            return objResultMessage;
        }

        /// <summary>
        /// xoa thanh vien trong nhom cong viec
        /// </summary>
        /// <param name="lstGroupMember"></param>
        /// <param name="intWorkGroupId"></param>
        /// <returns></returns>
        public ResultMessage DeleteMember(string strDeleteUser, int intMemberId, int intGroupId)
        {
            var objResultMessage = new ResultMessage();
            var objIData = Data.CreateData();
            try
            {
                objIData.Connect();
                objIData.CreateNewStoredProcedure(SpDeleteGroupMember);
                objIData.AddParameter("@USERID", intMemberId);
                objIData.AddParameter("@DELETEUSER", strDeleteUser);
                objIData.AddParameter("@GROUPID", intGroupId);
                objIData.ExecNonQuery();
            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, SystemError.ErrorTypes.LoadInfo,
                    "Lỗi xóa thành viên trong nhóm công việc", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail,
                    "DaWorksSupportGroup -> DeleteMember", "");
                return objResultMessage;
            }
            finally
            {
                objIData.Disconnect();
            }
            return objResultMessage;
        }

        public ResultMessage InsertGroupMember(WorkGroupMember objMember)
        {
            var objResultMessage = new ResultMessage();
            var objIData = Data.CreateData();
            try
            {
                objIData.CreateNewStoredProcedure(SpAddGroupMember);
                objIData.AddParameter("@GROUPID", objMember.WorksSupportGroupId);
                objIData.AddParameter("@USERNAME", objMember.MemberUserName);
                objIData.AddParameter("@MEMBERROLEID", objMember.WorksSupportMemberRoleId);
                objIData.AddParameter("@CREATEDUSER", objMember.CreatedUser);
                objIData.ExecNonQuery();

            }
            catch (Exception objEx)
            {
                objResultMessage = new ResultMessage(true, SystemError.ErrorTypes.Insert, "Lỗi thêm thông tin EO_WORKSSUPPORTGROUP_MEMBER", objEx.ToString());
                ErrorLog.Add(objIData, objResultMessage.Message, objResultMessage.MessageDetail, "DaWorksSupportGroup -> InsertGroupMember", Globals.ModuleName);
                return objResultMessage;
            }
            finally
            {
                objIData.Disconnect();
            }
            return objResultMessage;
        }
        #endregion

        #region Stored Procedure Names
        public const string SpSearch = "WORKSSUPPORTGROUP_V2_SEARCH";
        public const string SpSearchByID = "WORKSSUPPORTGROUP_V2_SRH";
        public const string SpGetAllByProjectId = "WORKSSUPPORTGROUP_V2_GETALL";
        public const string SpAdd = "WORKSSUPPORTGROUP_V2_ADD";
        public const string SpUpdate = "WORKSSUPPORTGROUP_V2_UPD";
        public const string SpDelete = "WORKSSUPPORTGROUP_V2_DEL";
        public const string SpGetAllMemberByGroupId = "WORKSSUPPORTGROUP_V2_MEMBERS";
        public const string SpDeleteGroupMember = "WORKSSUPPORTGROUP_MEMBER_DEL";
        public const string SpAddGroupMember = "WORKSSUPPORTGROUPMEMBER_V2_ADD";
        #endregion
    }
}
