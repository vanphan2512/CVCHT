using Nc.Erp.WorksSupport.Api.Common;
using Nc.Erp.WorksSupport.Api.Models.MemberRole;
using Nc.Erp.WorksSupport.Da.Configuration.MemberRole;
using Nc.Erp.WorksSupport.Do.Configuration.MemberRole;
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Nc.Erp.WorksSupport.Api.Controllers;
using Nc.Erp.WorksSupport.Do.Configuration.Department;

namespace Nc.Erp.WorksSupport.Api.Features.WorksSupport
{
    [RoutePrefix("api/v2/memberroles")]
    public class MemberRoleController : BaseController
    {
        /// <summary>
        /// Tìm kiếm chất lượng yêu cầu công việc cần hỗ trợ theo keyword
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [Route("Search")]
        public Response<List<WorksSupportMemberRole>> Search([FromUri] SearchParam objParam)
        {
            // Definition object to return.
            var ret = new Response<List<WorksSupportMemberRole>>();
            try
            {
                // Definition object return
                var listWorksSupportMemberRole = new List<WorksSupportMemberRole>();
                if (objParam.Keywords == null)
                {
                    objParam.Keywords = "";
                }
                //object param
                var objKeywords = new object[]
                {
                    "@KEYWORDS", objParam.Keywords,
                    "@ISDELETED",objParam.IsDeleted,
                    "@PAGEINDEX", objParam.PageIndex,
                    "@PAGESIZE", objParam.PageSize
                };
                // Call DaSystemManagement to search data.
                var objResultMessage = new DaWorksSupportMemberRole().SearchData(ref listWorksSupportMemberRole, objKeywords);

                if (listWorksSupportMemberRole != null)
                {
                    ret.Success = true;
                    ret.Data = listWorksSupportMemberRole;
                    ret.TotalRecord = listWorksSupportMemberRole.Count;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }
                // Return data.
                return ret;
            }
            catch (Exception e)
            {
                var desc = e.InnerException != null ? e.InnerException.ToString() : e.Message;
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }
        /// <summary>
        /// Lấy danh sách vai tro công việc cần hỗ trợ
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [Route("")]
        public Response<List<WorksSupportMemberRole>> GetAll()
        {
            // Definition object to return.
            var ret = new Response<List<WorksSupportMemberRole>>();
            try
            {
                // Definition object return
                var listWorksSupportMember = new List<WorksSupportMemberRole>();

                // Call DaSystemManagement to search data.
                var objResultMessage = new DaWorksSupportMemberRole().GetAll(ref listWorksSupportMember);

                if (listWorksSupportMember != null)
                {
                    ret.Success = true;
                    ret.Data = listWorksSupportMember;
                    ret.TotalRecord = listWorksSupportMember.Count;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }
                // Return data.
                return ret;
            }
            catch (Exception e)
            {
                var desc = e.InnerException != null ? e.InnerException.ToString() : e.Message;
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }

        [HttpGet]
        [Route("MemberRoleActived")]
        public Response<List<WorksSupportMemberRole>> MemberRoleActived()
        {
            // Definition object to return.
            var ret = new Response<List<WorksSupportMemberRole>>();
            try
            {
                // Definition object return
                var listWorksSupportMember = new List<WorksSupportMemberRole>();

                // Call DaSystemManagement to search data.
                var objResultMessage = new DaWorksSupportMemberRole().GetAllActived(ref listWorksSupportMember);

                if (listWorksSupportMember != null)
                {
                    ret.Success = true;
                    ret.Data = listWorksSupportMember;
                    ret.TotalRecord = listWorksSupportMember.Count;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }
                // Return data.
                return ret;
            }
            catch (Exception e)
            {
                var desc = e.InnerException != null ? e.InnerException.ToString() : e.Message;
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }
        /// <summary>
        /// Lấy vai tro công việc cần hỗ trợ theo ID
        /// </summary>
        /// <param name="objparam"></param>
        /// <returns></returns>
        [HttpGet]
        [Route("{id}")]
        public Response<WorksSupportMemberRole> GetById([FromUri] GetByParam objparam)
        {
            // Definition object to return.
            var ret = new Response<WorksSupportMemberRole>();
            try
            {
                //validate param
                // ValidateParams(objparam);
                // Definition object return
                var obj = new WorksSupportMemberRole();

                // Call DaWorksSupportStatus to search data.
                var objResultMessage = new DaWorksSupportMemberRole().GetById(ref obj, objparam.Id);

                if (obj != null)
                {
                    ret.Success = true;
                    ret.Data = obj;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }
                // Return data.
                return ret;
            }
            catch (Exception e)
            {
                var desc = e.InnerException != null ? e.InnerException.ToString() : e.Message;
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }

        /// <summary>
        /// Xóa trạng thái công việc cần hỗ trợ theo ID
        /// </summary>
        /// <param name="objparam"></param>
        /// <returns></returns>
        [HttpPost]
        [Route("del")]
        public Response<WorksSupportMemberRole> Delete([FromBody] DeleteParam objparam)

        {
            // Definition object to return.
            var ret = new Response<WorksSupportMemberRole>();
            try
            {
                //Validate param
                ValidateParams(objparam);
               
                // Call DaWorksSupportStatus to search data.
                var objResultMessage = new DaWorksSupportMemberRole().Delete(objparam.User, objparam.Id);

                if (!objResultMessage.IsError)
                {
                    ret.Success = true;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }
                // Return data.
                return ret;
            }
            catch (Exception e)
            {
                var desc = e.InnerException != null ? e.InnerException.ToString() : e.Message;
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }

        [HttpPost]
        [Route("insertBy")]
        public Response<WorksSupportMemberRole> SaveDataBy([FromBody] SaveParamBy objparam)
        {
            // Definition object to return.
            var ret = new Response<WorksSupportMemberRole>();
            try
            {
                //validate param
                ValidateParams(objparam);
                // Definition object return
                // check name is existed in database
                var objCheck = new WorksSupportMemberRoleValidation();
                var listError = new List<ValidationError>();
                new DaWorksSupportMemberRole().CheckNameExisted(ref objCheck, objparam.Id, objparam.WorksSupportMemberRoleName, objparam.OrderIndex);
                if (objCheck.CountName >= 1)
                {
                    var error = new ValidationError
                    {
                        Key = "WorksSupportMemberRoleName",
                        Message = "NCS-000001: Tên vai trò đã tồn tại!"
                    };
                    listError.Add(error);
                }
                if (objCheck.CountOrderIndex == 0)
                {
                    var error = new ValidationError();
                    error.Key = "OrderIndex";
                    error.Message = "NCS-000002: Thứ tự hiển thị không tồn tại!";
                    listError.Add(error);
                }
                if (listError.Count > 0)
                {
                    ret.Success = false;
                    ret.Errors = listError;
                    return ret;
                }
                var obj = new WorksSupportMemberRole()
                {
                    WorksSupportMemberRoleId = objparam.Id,
                    WorksSupportMemberRoleName = objparam.WorksSupportMemberRoleName,
                    Description = objparam.Description,
                    IconUrl = objparam.IconUrl,
                    OrderIndex = objparam.OrderIndex,
                    IsActived = objparam.IsActived,
                    IsSystem = objparam.IsSystem,
                    UpdatedUser = objparam.User,
                    CreatedUser = objparam.User
                };
                // Call DaWorksSupportStatus to search data.
                var objResultMessage = new DaWorksSupportMemberRole().Insert(obj, ref obj);

                if (!objResultMessage.IsError)
                {
                    ret.Success = true;
                    ret.Data = obj;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }

                // Return data.
                return ret;
            }
            catch (Exception e)
            {
                var desc = e.InnerException != null ? e.InnerException.ToString() : e.Message;
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }

        [HttpPost]
        [Route("save")]
        public ResponseV1<WorksSupportMemberRole> SaveData([FromBody] SaveParamBy objparam)
        {
            // Definition object to return.
            var result = new ResponseV1<WorksSupportMemberRole>();
            var ret = SaveDataBy(objparam);
            if (ret != null)
            {
                result.data = new List<WorksSupportMemberRole> { ret.Data };
            }
            return result;
        }

        [HttpPost]
        [Route("GetRole")]
        public Response<List<WorksSupportMemberRole>> GetRoleByProjectId([FromBody] GetByParam objParam)
        {
            // Definition object to return.
            var ret = new Response<List<WorksSupportMemberRole>>();
            try
            {
                // Definition object return
                var listWorksSupportMemberRole = new List<WorksSupportMemberRole>();
                 
                // Call DaSystemManagement to search data.
                var objResultMessage = new DaWorksSupportMemberRole().SearchRoleByProjectId(ref listWorksSupportMemberRole, objParam.Id);

                if (listWorksSupportMemberRole != null)
                {
                    ret.Success = true;
                    ret.Data = listWorksSupportMemberRole;
                    ret.TotalRecord = listWorksSupportMemberRole.Count;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }
                // Return data.
                return ret;
            }
            catch (Exception e)
            {
                var desc = e.InnerException != null ? e.InnerException.ToString() : e.Message;
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }

        [HttpGet]
        [Route("GetDepartment")]
        public Response<List<MembersOfDepartment>> GetAllDepartment()
        {
            // Definition object to return.
            var ret = new Response<List<MembersOfDepartment>>();
            try
            {
                // Definition object return
                var lstDepart = new List<MembersOfDepartment>();

                // Call DaSystemManagement to search data.
                var objResultMessage = new DaWorksSupportMemberRole().GetDepartmentAll(ref lstDepart);

                if (lstDepart != null)
                {
                    ret.Success = true;
                    ret.Data = lstDepart;
                    ret.TotalRecord = lstDepart.Count;
                }
                else
                {
                    ret.Success = false;
                    ret.Message = objResultMessage.Message;
                }
                // Return data.
                return ret;
            }
            catch (Exception e)
            {
                var desc = e.InnerException != null ? e.InnerException.ToString() : e.Message;
                var msg = Request.CreateErrorResponse(HttpStatusCode.BadRequest, desc);
                throw new HttpResponseException(msg);
            }
        }
    }
}
