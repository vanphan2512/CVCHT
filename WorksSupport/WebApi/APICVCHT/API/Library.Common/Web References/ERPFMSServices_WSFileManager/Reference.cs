//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Library.Common.ERPFMSServices_WSFileManager {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WSFileManagerSoap", Namespace="http://tempuri.org/")]
    public partial class WSFileManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadMultiFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFile1OperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadFileOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WSFileManager() {
            this.Url = global::Library.Common.Properties.Settings.Default.Library_Common_ERPFMSServices_WSFileManager_WSFileManager;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadFileCompletedEventHandler UploadFileCompleted;
        
        /// <remarks/>
        public event UploadMultiFileCompletedEventHandler UploadMultiFileCompleted;
        
        /// <remarks/>
        public event UploadFile1CompletedEventHandler UploadFile1Completed;
        
        /// <remarks/>
        public event DownloadFileCompletedEventHandler DownloadFileCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Upload_tap_tin_he_thong_moi", RequestElementName="Upload_tap_tin_he_thong_moi", RequestNamespace="http://tempuri.org/", ResponseElementName="Upload_tap_tin_he_thong_moiResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Upload_tap_tin_he_thong_moiResult")]
        public ResultMessage UploadFile(string strAuthenData, string strGUID, UploadFile objUploadFile, ref string strFileID) {
            object[] results = this.Invoke("UploadFile", new object[] {
                        strAuthenData,
                        strGUID,
                        objUploadFile,
                        strFileID});
            strFileID = ((string)(results[1]));
            return ((ResultMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileAsync(string strAuthenData, string strGUID, UploadFile objUploadFile, string strFileID) {
            this.UploadFileAsync(strAuthenData, strGUID, objUploadFile, strFileID, null);
        }
        
        /// <remarks/>
        public void UploadFileAsync(string strAuthenData, string strGUID, UploadFile objUploadFile, string strFileID, object userState) {
            if ((this.UploadFileOperationCompleted == null)) {
                this.UploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileOperationCompleted);
            }
            this.InvokeAsync("UploadFile", new object[] {
                        strAuthenData,
                        strGUID,
                        objUploadFile,
                        strFileID}, this.UploadFileOperationCompleted, userState);
        }
        
        private void OnUploadFileOperationCompleted(object arg) {
            if ((this.UploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileCompleted(this, new UploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadMultiFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultMessage UploadMultiFile(string strAuthenData, string strGUID, UploadFile[] lstUploadFile, ref string[] lstFileID, ref string[] lstFilePath) {
            object[] results = this.Invoke("UploadMultiFile", new object[] {
                        strAuthenData,
                        strGUID,
                        lstUploadFile,
                        lstFileID,
                        lstFilePath});
            lstFileID = ((string[])(results[1]));
            lstFilePath = ((string[])(results[2]));
            return ((ResultMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UploadMultiFileAsync(string strAuthenData, string strGUID, UploadFile[] lstUploadFile, string[] lstFileID, string[] lstFilePath) {
            this.UploadMultiFileAsync(strAuthenData, strGUID, lstUploadFile, lstFileID, lstFilePath, null);
        }
        
        /// <remarks/>
        public void UploadMultiFileAsync(string strAuthenData, string strGUID, UploadFile[] lstUploadFile, string[] lstFileID, string[] lstFilePath, object userState) {
            if ((this.UploadMultiFileOperationCompleted == null)) {
                this.UploadMultiFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadMultiFileOperationCompleted);
            }
            this.InvokeAsync("UploadMultiFile", new object[] {
                        strAuthenData,
                        strGUID,
                        lstUploadFile,
                        lstFileID,
                        lstFilePath}, this.UploadMultiFileOperationCompleted, userState);
        }
        
        private void OnUploadMultiFileOperationCompleted(object arg) {
            if ((this.UploadMultiFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadMultiFileCompleted(this, new UploadMultiFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="UploadFile1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Upload_tap_tin_tuong_thich_he_thong_cu", RequestElementName="Upload_tap_tin_tuong_thich_he_thong_cu", RequestNamespace="http://tempuri.org/", ResponseElementName="Upload_tap_tin_tuong_thich_he_thong_cuResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Upload_tap_tin_tuong_thich_he_thong_cuResult")]
        public ResultMessage UploadFile(string strAuthenData, string strGUID, UploadFile objUploadFile, ref string strFileID, ref string strFilePath) {
            object[] results = this.Invoke("UploadFile1", new object[] {
                        strAuthenData,
                        strGUID,
                        objUploadFile,
                        strFileID,
                        strFilePath});
            strFileID = ((string)(results[1]));
            strFilePath = ((string)(results[2]));
            return ((ResultMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFile1Async(string strAuthenData, string strGUID, UploadFile objUploadFile, string strFileID, string strFilePath) {
            this.UploadFile1Async(strAuthenData, strGUID, objUploadFile, strFileID, strFilePath, null);
        }
        
        /// <remarks/>
        public void UploadFile1Async(string strAuthenData, string strGUID, UploadFile objUploadFile, string strFileID, string strFilePath, object userState) {
            if ((this.UploadFile1OperationCompleted == null)) {
                this.UploadFile1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFile1OperationCompleted);
            }
            this.InvokeAsync("UploadFile1", new object[] {
                        strAuthenData,
                        strGUID,
                        objUploadFile,
                        strFileID,
                        strFilePath}, this.UploadFile1OperationCompleted, userState);
        }
        
        private void OnUploadFile1OperationCompleted(object arg) {
            if ((this.UploadFile1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFile1Completed(this, new UploadFile1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultMessage DownloadFile(string strAuthenData, string strGUID, ref DownloadFile objDownloadFile) {
            object[] results = this.Invoke("DownloadFile", new object[] {
                        strAuthenData,
                        strGUID,
                        objDownloadFile});
            objDownloadFile = ((DownloadFile)(results[1]));
            return ((ResultMessage)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadFileAsync(string strAuthenData, string strGUID, DownloadFile objDownloadFile) {
            this.DownloadFileAsync(strAuthenData, strGUID, objDownloadFile, null);
        }
        
        /// <remarks/>
        public void DownloadFileAsync(string strAuthenData, string strGUID, DownloadFile objDownloadFile, object userState) {
            if ((this.DownloadFileOperationCompleted == null)) {
                this.DownloadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadFileOperationCompleted);
            }
            this.InvokeAsync("DownloadFile", new object[] {
                        strAuthenData,
                        strGUID,
                        objDownloadFile}, this.DownloadFileOperationCompleted, userState);
        }
        
        private void OnDownloadFileOperationCompleted(object arg) {
            if ((this.DownloadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadFileCompleted(this, new DownloadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class UploadFile {
        
        private string fileNameField;
        
        private string fMSApplicationIDField;
        
        private byte[] bufferFileField;
        
        private string extensionField;
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public string FMSApplicationID {
            get {
                return this.fMSApplicationIDField;
            }
            set {
                this.fMSApplicationIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] BufferFile {
            get {
                return this.bufferFileField;
            }
            set {
                this.bufferFileField = value;
            }
        }
        
        /// <remarks/>
        public string Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DownloadFile {
        
        private string fileIDField;
        
        private byte[] bufferFileField;
        
        private string fMSApplicationIDField;
        
        private string filePathField;
        
        /// <remarks/>
        public string FileID {
            get {
                return this.fileIDField;
            }
            set {
                this.fileIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] BufferFile {
            get {
                return this.bufferFileField;
            }
            set {
                this.bufferFileField = value;
            }
        }
        
        /// <remarks/>
        public string FMSApplicationID {
            get {
                return this.fMSApplicationIDField;
            }
            set {
                this.fMSApplicationIDField = value;
            }
        }
        
        /// <remarks/>
        public string FilePath {
            get {
                return this.filePathField;
            }
            set {
                this.filePathField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ResultMessage {
        
        private bool isErrorField;
        
        private ErrorTypes errorTypeField;
        
        private string messageField;
        
        private string messageDetailField;
        
        /// <remarks/>
        public bool IsError {
            get {
                return this.isErrorField;
            }
            set {
                this.isErrorField = value;
            }
        }
        
        /// <remarks/>
        public ErrorTypes ErrorType {
            get {
                return this.errorTypeField;
            }
            set {
                this.errorTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string MessageDetail {
            get {
                return this.messageDetailField;
            }
            set {
                this.messageDetailField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ErrorTypes {
        
        /// <remarks/>
        No_Error,
        
        /// <remarks/>
        LoadInfo,
        
        /// <remarks/>
        Insert,
        
        /// <remarks/>
        Update,
        
        /// <remarks/>
        Delete,
        
        /// <remarks/>
        SearchData,
        
        /// <remarks/>
        GetData,
        
        /// <remarks/>
        InvalidIV,
        
        /// <remarks/>
        TokenNotExist,
        
        /// <remarks/>
        TokenInvalid,
        
        /// <remarks/>
        CheckData,
        
        /// <remarks/>
        Others,
        
        /// <remarks/>
        UserDefine,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UploadFileCompletedEventHandler(object sender, UploadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultMessage)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strFileID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UploadMultiFileCompletedEventHandler(object sender, UploadMultiFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadMultiFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadMultiFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultMessage)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] lstFileID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string[] lstFilePath {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UploadFile1CompletedEventHandler(object sender, UploadFile1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFile1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFile1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultMessage)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strFileID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strFilePath {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DownloadFileCompletedEventHandler(object sender, DownloadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultMessage)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public DownloadFile objDownloadFile {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DownloadFile)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591